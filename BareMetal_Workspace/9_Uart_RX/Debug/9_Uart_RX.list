
9_Uart_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  0800045c  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  0000145c  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  0000145c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  0800045c  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800045c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800045c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007a3  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000280  00000000  00000000  00001c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019685  00000000  00000000  00001f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e38  00000000  00000000  0001b623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2f2  00000000  00000000  0001c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000aa790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000aa8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800043c 	.word	0x0800043c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800043c 	.word	0x0800043c

080001d8 <main>:

#define GPIOBEN (1<<1)
#define LedPin	(1<<7)
char key;
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	init_uart3_rxtx();
 80001dc:	f000 f830 	bl	8000240 <init_uart3_rxtx>
	RCC->AHB1ENR |= GPIOBEN;
 80001e0:	4b14      	ldr	r3, [pc, #80]	@ (8000234 <main+0x5c>)
 80001e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e4:	4a13      	ldr	r2, [pc, #76]	@ (8000234 <main+0x5c>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER |= (1<<14);
 80001ec:	4b12      	ldr	r3, [pc, #72]	@ (8000238 <main+0x60>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a11      	ldr	r2, [pc, #68]	@ (8000238 <main+0x60>)
 80001f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<15);
 80001f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <main+0x60>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000238 <main+0x60>)
 80001fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000202:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		key = uart3_read();
 8000204:	f000 f88c 	bl	8000320 <uart3_read>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <main+0x64>)
 800020e:	701a      	strb	r2, [r3, #0]
		if(key=='1')
 8000210:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <main+0x64>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b31      	cmp	r3, #49	@ 0x31
 8000216:	d106      	bne.n	8000226 <main+0x4e>
			GPIOB->ODR |= LedPin;
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <main+0x60>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a06      	ldr	r2, [pc, #24]	@ (8000238 <main+0x60>)
 800021e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000222:	6153      	str	r3, [r2, #20]
 8000224:	e7ee      	b.n	8000204 <main+0x2c>
		else
			GPIOB->ODR &= ~LedPin;
 8000226:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <main+0x60>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a03      	ldr	r2, [pc, #12]	@ (8000238 <main+0x60>)
 800022c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000230:	6153      	str	r3, [r2, #20]
		key = uart3_read();
 8000232:	e7e7      	b.n	8000204 <main+0x2c>
 8000234:	40023800 	.word	0x40023800
 8000238:	40020400 	.word	0x40020400
 800023c:	2000001c 	.word	0x2000001c

08000240 <init_uart3_rxtx>:
	uart3_write(ch);
	return ch;
}

void init_uart3_rxtx(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	/*********configure uart gpio_pin***********/
	//enable clock access to gpioD
	RCC->AHB1ENR|=GPIODEN;
 8000244:	4b32      	ldr	r3, [pc, #200]	@ (8000310 <init_uart3_rxtx+0xd0>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a31      	ldr	r2, [pc, #196]	@ (8000310 <init_uart3_rxtx+0xd0>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PD8 to alternate function mode
	GPIOD->MODER |= (1<<17);
 8000250:	4b30      	ldr	r3, [pc, #192]	@ (8000314 <init_uart3_rxtx+0xd4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a2f      	ldr	r2, [pc, #188]	@ (8000314 <init_uart3_rxtx+0xd4>)
 8000256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<16);
 800025c:	4b2d      	ldr	r3, [pc, #180]	@ (8000314 <init_uart3_rxtx+0xd4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a2c      	ldr	r2, [pc, #176]	@ (8000314 <init_uart3_rxtx+0xd4>)
 8000262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000266:	6013      	str	r3, [r2, #0]
	//set PD8 alternate function to type UART_TX (AF7)
	GPIOD->AFR[1]|=(1<<0);
 8000268:	4b2a      	ldr	r3, [pc, #168]	@ (8000314 <init_uart3_rxtx+0xd4>)
 800026a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800026c:	4a29      	ldr	r2, [pc, #164]	@ (8000314 <init_uart3_rxtx+0xd4>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]|=(1<<1);
 8000274:	4b27      	ldr	r3, [pc, #156]	@ (8000314 <init_uart3_rxtx+0xd4>)
 8000276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000278:	4a26      	ldr	r2, [pc, #152]	@ (8000314 <init_uart3_rxtx+0xd4>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]|=(1<<2);
 8000280:	4b24      	ldr	r3, [pc, #144]	@ (8000314 <init_uart3_rxtx+0xd4>)
 8000282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000284:	4a23      	ldr	r2, [pc, #140]	@ (8000314 <init_uart3_rxtx+0xd4>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]&=~(1<<3);
 800028c:	4b21      	ldr	r3, [pc, #132]	@ (8000314 <init_uart3_rxtx+0xd4>)
 800028e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000290:	4a20      	ldr	r2, [pc, #128]	@ (8000314 <init_uart3_rxtx+0xd4>)
 8000292:	f023 0308 	bic.w	r3, r3, #8
 8000296:	6253      	str	r3, [r2, #36]	@ 0x24
	//	//set PD9 to alternate function mode
	GPIOD->MODER |= (1<<19);
 8000298:	4b1e      	ldr	r3, [pc, #120]	@ (8000314 <init_uart3_rxtx+0xd4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1d      	ldr	r2, [pc, #116]	@ (8000314 <init_uart3_rxtx+0xd4>)
 800029e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<18);
 80002a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80002ae:	6013      	str	r3, [r2, #0]
	//set PD9 to alternate function to type UART_RX (AF7)
	GPIOD->AFR[1]|=(1<<4);
 80002b0:	4b18      	ldr	r3, [pc, #96]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002b4:	4a17      	ldr	r2, [pc, #92]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]|=(1<<5);
 80002bc:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002c0:	4a14      	ldr	r2, [pc, #80]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]|=(1<<6);
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002cc:	4a11      	ldr	r2, [pc, #68]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002d2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]&=~(1<<7);
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000314 <init_uart3_rxtx+0xd4>)
 80002da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002de:	6253      	str	r3, [r2, #36]	@ 0x24

	/*********configuring Uart module**********/
	//enable clock access to uart3
	RCC->APB1ENR |= USART3EN;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <init_uart3_rxtx+0xd0>)
 80002e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <init_uart3_rxtx+0xd0>)
 80002e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002ea:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baudrate
	uart_set_baudrate(USART3,APB1,Uart_Baudrate);
 80002ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002f0:	4909      	ldr	r1, [pc, #36]	@ (8000318 <init_uart3_rxtx+0xd8>)
 80002f2:	480a      	ldr	r0, [pc, #40]	@ (800031c <init_uart3_rxtx+0xdc>)
 80002f4:	f000 f828 	bl	8000348 <uart_set_baudrate>
	//configure the transfer direction for both RX and TX using control register
	USART3->CR1 = (TE_EN | RE_EN);
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <init_uart3_rxtx+0xdc>)
 80002fa:	220c      	movs	r2, #12
 80002fc:	60da      	str	r2, [r3, #12]

	//enable uart module
	USART3->CR1 |= UE_EN;
 80002fe:	4b07      	ldr	r3, [pc, #28]	@ (800031c <init_uart3_rxtx+0xdc>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	4a06      	ldr	r2, [pc, #24]	@ (800031c <init_uart3_rxtx+0xdc>)
 8000304:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000308:	60d3      	str	r3, [r2, #12]
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800
 8000314:	40020c00 	.word	0x40020c00
 8000318:	00f42400 	.word	0x00f42400
 800031c:	40004800 	.word	0x40004800

08000320 <uart3_read>:
	//write to the transmit data register
	USART3->DR = (ch&0xFF);
}
//function to recieve the charactor from uart
char uart3_read(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	//ensure the receive  data register is not empty
	while(!(USART3->SR & RXNE));
 8000324:	bf00      	nop
 8000326:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <uart3_read+0x24>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f003 0320 	and.w	r3, r3, #32
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <uart3_read+0x6>
	//receive data
	return USART3->DR;
 8000332:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <uart3_read+0x24>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	b2db      	uxtb	r3, r3
}
 8000338:	4618      	mov	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40004800 	.word	0x40004800

08000348 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Pheriph_clk,uint32_t Baudrate)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	USART3->BRR |=compute_uart_bd(Pheriph_clk,Baudrate);
 8000354:	6879      	ldr	r1, [r7, #4]
 8000356:	68b8      	ldr	r0, [r7, #8]
 8000358:	f000 f80e 	bl	8000378 <compute_uart_bd>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b04      	ldr	r3, [pc, #16]	@ (8000374 <uart_set_baudrate+0x2c>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4611      	mov	r1, r2
 8000366:	4a03      	ldr	r2, [pc, #12]	@ (8000374 <uart_set_baudrate+0x2c>)
 8000368:	430b      	orrs	r3, r1
 800036a:	6093      	str	r3, [r2, #8]
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40004800 	.word	0x40004800

08000378 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t Pheriph_clk,uint32_t Baudrate)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	return (Pheriph_clk+Baudrate/2)/Baudrate;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	085a      	lsrs	r2, r3, #1
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	441a      	add	r2, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000390:	b29b      	uxth	r3, r3
}
 8000392:	4618      	mov	r0, r3
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <LoopForever+0x6>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	@ (80003e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <LoopForever+0xe>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	@ (80003e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	@ (80003ec <LoopForever+0x16>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ce:	f000 f811 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d2:	f7ff ff01 	bl	80001d8 <main>

080003d6 <LoopForever>:

LoopForever:
    b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   r0, =_estack
 80003d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e4:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ec:	20000020 	.word	0x20000020

080003f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4d0d      	ldr	r5, [pc, #52]	@ (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000430 <__libc_init_array+0x3c>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2600      	movs	r6, #0
 8000400:	42a6      	cmp	r6, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4d0b      	ldr	r5, [pc, #44]	@ (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	@ (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2600      	movs	r6, #0
 8000412:	42a6      	cmp	r6, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f855 3b04 	ldr.w	r3, [r5], #4
 800041c:	4798      	blx	r3
 800041e:	3601      	adds	r6, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f855 3b04 	ldr.w	r3, [r5], #4
 8000426:	4798      	blx	r3
 8000428:	3601      	adds	r6, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
