
7_Uart_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS
  4 .ARM          00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000455  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000170  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000019e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189e2  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000688  00000000  00000000  0001a477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa95  00000000  00000000  0001aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5594  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  000a55d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a56c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003cc 	.word	0x080003cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003cc 	.word	0x080003cc

08000204 <main>:

#define Uart_BaudRate 115200


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	init_uart3_tx();
 8000208:	f000 f806 	bl	8000218 <init_uart3_tx>
	while(1)
	{
		uart3_write('here is a high from STM32F446ZE');
 800020c:	4801      	ldr	r0, [pc, #4]	@ (8000214 <main+0x10>)
 800020e:	f000 f84f 	bl	80002b0 <uart3_write>
 8000212:	e7fb      	b.n	800020c <main+0x8>
 8000214:	34365a45 	.word	0x34365a45

08000218 <init_uart3_tx>:
	}
}

void init_uart3_tx(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	/*********configure uart gpio_pin***********/
	//enable clock access to gpioD
	RCC->AHB1ENR|=GPIODEN;
 800021c:	4b20      	ldr	r3, [pc, #128]	@ (80002a0 <init_uart3_tx+0x88>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000220:	4a1f      	ldr	r2, [pc, #124]	@ (80002a0 <init_uart3_tx+0x88>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA2 to alternate function mode
	GPIOD->MODER|= (1U<<17);
 8000228:	4b1e      	ldr	r3, [pc, #120]	@ (80002a4 <init_uart3_tx+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1d      	ldr	r2, [pc, #116]	@ (80002a4 <init_uart3_tx+0x8c>)
 800022e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOD->MODER&= ~(1U<<16);
 8000234:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <init_uart3_tx+0x8c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a1a      	ldr	r2, [pc, #104]	@ (80002a4 <init_uart3_tx+0x8c>)
 800023a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800023e:	6013      	str	r3, [r2, #0]
	//set PA2 alternate function to type UART_TX (AF7)
	GPIOD->AFR[1]&=~(1U<<3);
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <init_uart3_tx+0x8c>)
 8000242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000244:	4a17      	ldr	r2, [pc, #92]	@ (80002a4 <init_uart3_tx+0x8c>)
 8000246:	f023 0308 	bic.w	r3, r3, #8
 800024a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]|=(1U<<2);
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <init_uart3_tx+0x8c>)
 800024e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000250:	4a14      	ldr	r2, [pc, #80]	@ (80002a4 <init_uart3_tx+0x8c>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]|=(1U<<1);
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <init_uart3_tx+0x8c>)
 800025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800025c:	4a11      	ldr	r2, [pc, #68]	@ (80002a4 <init_uart3_tx+0x8c>)
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1]|=(1U<<0);
 8000264:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <init_uart3_tx+0x8c>)
 8000266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000268:	4a0e      	ldr	r2, [pc, #56]	@ (80002a4 <init_uart3_tx+0x8c>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6253      	str	r3, [r2, #36]	@ 0x24

	/*********configuring Uart module**********/
	//enable clock access to uart3
	RCC->APB1ENR|=UART3EN;
 8000270:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <init_uart3_tx+0x88>)
 8000272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000274:	4a0a      	ldr	r2, [pc, #40]	@ (80002a0 <init_uart3_tx+0x88>)
 8000276:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800027a:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baudrate
	uart_set_baudrate(USART3,APB1,Uart_BaudRate);
 800027c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000280:	4909      	ldr	r1, [pc, #36]	@ (80002a8 <init_uart3_tx+0x90>)
 8000282:	480a      	ldr	r0, [pc, #40]	@ (80002ac <init_uart3_tx+0x94>)
 8000284:	f000 f82c 	bl	80002e0 <uart_set_baudrate>
	//configure the transfer direction
	USART3->CR1 = CR1_TE;
 8000288:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <init_uart3_tx+0x94>)
 800028a:	2208      	movs	r2, #8
 800028c:	60da      	str	r2, [r3, #12]

	//enable uart module
	USART3->CR1 |= CR1_UE;
 800028e:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <init_uart3_tx+0x94>)
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	4a06      	ldr	r2, [pc, #24]	@ (80002ac <init_uart3_tx+0x94>)
 8000294:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000298:	60d3      	str	r3, [r2, #12]
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020c00 	.word	0x40020c00
 80002a8:	00f42400 	.word	0x00f42400
 80002ac:	40004800 	.word	0x40004800

080002b0 <uart3_write>:

void uart3_write(int ch)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	//ensure the transmit data register is empty
	while(!(USART3->SR & SR_TXE));
 80002b8:	bf00      	nop
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <uart3_write+0x2c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <uart3_write+0xa>
	//write to the transmit data register
	USART3->DR = (0xFF&ch);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <uart3_write+0x2c>)
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	6053      	str	r3, [r2, #4]

}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40004800 	.word	0x40004800

080002e0 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	USART3->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	68b8      	ldr	r0, [r7, #8]
 80002f0:	f000 f80a 	bl	8000308 <compute_uart_bd>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b02      	ldr	r3, [pc, #8]	@ (8000304 <uart_set_baudrate+0x24>)
 80002fa:	609a      	str	r2, [r3, #8]
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40004800 	.word	0x40004800

08000308 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
	return (PeriphClk+BaudRate/2)/BaudRate;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	085a      	lsrs	r2, r3, #1
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	441a      	add	r2, r3
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000320:	b29b      	uxth	r3, r3
}
 8000322:	4618      	mov	r0, r3
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
	...

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff4f 	bl	8000204 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	2000001c 	.word	0x2000001c

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	@ (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	@ (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	@ (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
