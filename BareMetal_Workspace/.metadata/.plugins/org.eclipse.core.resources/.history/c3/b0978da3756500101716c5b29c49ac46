#include "stm32f4xx.h"



#define TIM4EN		(1U<<2)
#define CR1_CEN		(1U<<0)
#define OC_TOGGLE	((1U<<4) | (1U<<5))
#define CCER_CC1E	(1U<<4)


#define GPIOBEN		(1U<<1)
#define AFR7_TIM	(1U<<29)

void tim2_1hz_init(void)
{
	/*Enable clock access to tim2*/
	RCC->APB1ENR |=TIM4EN;

	/*Set prescaler value*/
	TIM4->PSC =  1600 - 1 ;  //  16 000 000 / 1 600 = 10 000
	/*Set auto-reload value*/
	TIM4->ARR =  10000 - 1;  // 10 000 / 10 000 = 1
	/*Clear counter*/
	TIM4->CNT = 0;

	/*Enable timer*/
	TIM4->CR1 = CR1_CEN;

}


void tim2_pb7_output_compare(void)
{

	 /*Enable clock access to GPIOB*/
	RCC->AHB1ENR |=GPIOBEN;

	/*Set PB7 mode to alternate function*/
	GPIOB->MODER &=~(1U<<14);
	GPIOB->MODER |=(1U<<15);

	/*Set PA5 alternate function type to TIM2_CH1 (AF01)*/
	GPIOB	->AFR[0] |=AFR7_TIM;

	/*Enable clock access to tim2*/
	RCC->APB1ENR |=TIM4EN;

	/*Set prescaler value*/
	TIM4->PSC =  1600 - 1 ;  //  16 000 000 / 1 600 = 10 000
	/*Set auto-reload value*/
	TIM4->ARR =  10000 - 1;  // 10 000 / 10 000 = 1

	/*Set output compare toggle mode*/
	TIM4->CCMR1 =  OC_TOGGLE;

	/*Enable tim2 ch1 in compare mode*/
	TIM4->CCER |=CCER_CC1E;

	/*Clear counter*/
	TIM4->CNT = 0;
	/*Enable timer*/
	TIM4->CR1 = CR1_CEN;
}
