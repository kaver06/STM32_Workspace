#include <stdint.h>
#include "stm32f4xx.h"

#define GPIODEN			(1U<<3)
#define UART3EN			(1U<<18)

#define CR1_TE			(1U<<3)
#define CR1_UE			(1U<<13)
#define SR_TXE			(1U<<7)



#define SYS_FREQ		16000000
#define APB1_CLK		SYS_FREQ

#define UART_BAUDRATE		115200

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uar2_tx_init(void);
void uart2_write(int ch);

int main(void)
{


	uar2_tx_init();

	while(1)
	{
		uart2_write('Y');
	}
}


void uar2_tx_init(void)
{
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpiod */
	RCC->AHB1ENR |= GPIODEN;

	/*Set PD5 mode to alternate function mode*/
	GPIOD->MODER &=~(1U<<10);
	GPIOD->MODER |= (1U<<11);

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOD->AFR[0] |= (1U<<20);
	GPIOD->AFR[0] |= (1U<<21);
	GPIOD->AFR[0] |= (1U<<22);
	GPIOD->AFR[0] &= ~(1U<<23);


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART3EN;

	/*Configure baudrate*/
	uart_set_baudrate(UART3,APB1_CLK,UART_BAUDRATE);

	/*Configure the transfer direction*/
	 USART3->CR1 =  CR1_TE;

	/*Enable uart module*/
	 USART3->CR1 |= CR1_UE;


}


void uart2_write(int ch)
{
  /*Make sure the transmit data register is empty*/
	while(!(USART3->SR & SR_TXE)){}

  /*Write to transmit data register*/
	USART3->DR	=  (ch & 0xFF);
}




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
	USART3->BRR =  compute_uart_bd(PeriphClk,BaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}

