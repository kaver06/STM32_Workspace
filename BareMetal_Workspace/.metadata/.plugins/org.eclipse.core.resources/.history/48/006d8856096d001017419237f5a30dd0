
#include "uart.h"
#include <stdint.h>

#define GPIODEN 		(1<<3)
#define USART3EN 		(1<<18)
#define SystemClk 		16000000
#define APB1 			SystemClk
#define Uart_Baudrate 	115200
#define TE_EN 			(1<<3)
#define RE_EN 			(1<<2)
#define UE_EN 			(1<<13)
#define TXE	  			(1<<7)
#define CR1_RXNEIE		(1U<<5)

#define DMA1EN 			(1U<<21)
#define DMA_S_3EN		(1U<<0)
#define CHSEL4			(1U<<27)
#define DMA1_MINC		(1U<<10)
#define DMA1_DIR		(1U<<6)
#define DMA1_TCIE		(1U<<4)
#define UART3_DMAT		(1U<<7)

static uint16_t compute_uart_bd(uint32_t Pheriph_clk,uint32_t Baudrate);
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Pheriph_clk,uint32_t Baudrate);
void uart3_write(int ch);



int __io_putchar(int ch)
{
	uart3_write(ch);
	return ch;
}

void init_uart3_tx(void)
{
	/*********configure uart gpio_pin***********/
	//enable clock access to gpioD
	RCC->AHB1ENR|=GPIODEN;
	//set PD8 to alternate function mode
	GPIOD->MODER |= (1<<17);
	GPIOD->MODER &=~(1<<16);
	//set PD8 alternate function to type UART_TX (AF7)
	GPIOD->AFR[1]|=(1<<0);
	GPIOD->AFR[1]|=(1<<1);
	GPIOD->AFR[1]|=(1<<2);
	GPIOD->AFR[1]&=~(1<<3);

	/*********configuring Uart module**********/
	//enable clock access to uart3
	RCC->APB1ENR |= USART3EN;
	//configure baudrate
	uart_set_baudrate(USART3,APB1,Uart_Baudrate);
	//configure the transfer direction for both RX and TX using control register
	USART3->CR1 = (TE_EN | RE_EN);

	//enable uart module
	USART3->CR1 |= UE_EN;
}
void init_uart3_rxtx(void)
{
	/*********configure uart gpio_pin***********/
	//enable clock access to gpioD
	RCC->AHB1ENR|=GPIODEN;
	//set PD8 to alternate function mode
	GPIOD->MODER |= (1<<17);
	GPIOD->MODER &=~(1<<16);
	//set PD8 alternate function to type UART_TX (AF7)
	GPIOD->AFR[1]|=(1<<0);
	GPIOD->AFR[1]|=(1<<1);
	GPIOD->AFR[1]|=(1<<2);
	GPIOD->AFR[1]&=~(1<<3);
	//	//set PD9 to alternate function mode
	GPIOD->MODER |= (1<<19);
	GPIOD->MODER &=~(1<<18);
	//set PD9 to alternate function to type UART_RX (AF7)
	GPIOD->AFR[1]|=(1<<4);
	GPIOD->AFR[1]|=(1<<5);
	GPIOD->AFR[1]|=(1<<6);
	GPIOD->AFR[1]&=~(1<<7);

	/*********configuring Uart module**********/
	//enable clock access to uart3
	RCC->APB1ENR |= USART3EN;
	//configure baudrate
	uart_set_baudrate(USART3,APB1,Uart_Baudrate);
	//configure the transfer direction for both RX and TX using control register
	USART3->CR1 = (TE_EN | RE_EN);

	//enable uart module
	USART3->CR1 |= UE_EN;
}

void uart3_write(int ch)
{
	//ensure the transmit data register is empty
	while(!(USART3->SR & TXE));
	//write to the transmit data register
	USART3->DR = (ch&0xFF);
}
//function to recieve the charactor from uart
char uart3_read(void)
{
	//ensure the receive  data register is not empty
	while(!(USART3->SR & RXNE));
	//receive data
	return USART3->DR;
}
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Pheriph_clk,uint32_t Baudrate)
{
	USART3->BRR |=compute_uart_bd(Pheriph_clk,Baudrate);
}

static uint16_t compute_uart_bd(uint32_t Pheriph_clk,uint32_t Baudrate)
{
	return (Pheriph_clk+Baudrate/2)/Baudrate;
}


void init_uart3_interrupt_rxtx(void)
{
	/*********configure uart gpio_pin***********/
	//enable clock access to gpioD
	RCC->AHB1ENR|=GPIODEN;
	//set PD8 to alternate function mode
	GPIOD->MODER |= (1<<17);
	GPIOD->MODER &=~(1<<16);
	//set PD8 alternate function to type UART_TX (AF7)
	GPIOD->AFR[1]|=(1<<0);
	GPIOD->AFR[1]|=(1<<1);
	GPIOD->AFR[1]|=(1<<2);
	GPIOD->AFR[1]&=~(1<<3);
	//	//set PD9 to alternate function mode
	GPIOD->MODER |= (1<<19);
	GPIOD->MODER &=~(1<<18);
	//set PD9 to alternate function to type UART_RX (AF7)
	GPIOD->AFR[1]|=(1<<4);
	GPIOD->AFR[1]|=(1<<5);
	GPIOD->AFR[1]|=(1<<6);
	GPIOD->AFR[1]&=~(1<<7);

	/*********configuring Uart module**********/
	//enable clock access to uart3
	RCC->APB1ENR |= USART3EN;
	//configure baudrate
	uart_set_baudrate(USART3,APB1,Uart_Baudrate);
	//configure the transfer direction for both RX and TX using control register
	USART3->CR1 = (TE_EN | RE_EN);
	//enable uart_rx_interrupt
	USART3->CR1 |= CR1_RXNEIE;
	 //Enable UART3 interrupt in NVIC
	NVIC_EnableIRQ(USART3_IRQn);
	//enable uart module
	USART3->CR1 |= UE_EN;
}

/*create a function pass the source destination and length of the data as unsigned 32 bit int*/
void dma1_stream3_init(unint32_t dst,uint32_t src,uint32_t len)
{
	//enable clock access to DMA
	RCC->AHB1ENR|=DMA1EN;
	//disable DMA1 stream 3
	DMA1_Stream3->CR &=~DMA_S_3EN;

	//wait for the DMA Stream to get disabled
	while(DMA1_Stream3->CR & DMA_S_3EN);
	//clear all interrupt flags of stream 3
	DMA1->LISR |= (1U<<22);
	DMA1->LISR |= (1U<<24);
	DMA1->LISR |= (1U<<25);
	DMA1->LISR |= (1U<<26);
	DMA1->LISR |= (1U<<27);
	//set the destination buffer
	DMA1_Stream3->PAR = dst;
	//set the source buffer
	DMA1_Stream3->M0AR = src;
	//set length
	DMA1_Stream3->NDTR = len;
	//select stream3 channel 4
	DMA1_Stream3->CR = CHSEL4;
	//enable memory increment
	DMA1_Stream3->CR |= DMA1_MINC;
	//configure transfer direction
	DMA1_Stream3->CR|=DMA1_DIR;
	//Enable DMA transfer complete interrupt
	DMA1_Stream3->CR|=DMA1_TCIE;
	//enable direct mode and disable FIFO
	DMA1_Stream3->FCR =0;
	//enable DMA1 stream3
	DMA1_Stream3->CR |=DMA_S_3EN;
	//Enable UART3 Tx DMA
	USART3->CR3 |= UART3_DMAT;
	//DMA interrupt enable in NVIC
	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
}


