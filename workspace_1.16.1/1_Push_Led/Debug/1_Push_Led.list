
1_Push_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  00001388  2**0
                  CONTENTS
  4 .ARM          00000000  08000380  08000380  00001388  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000384  08000384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000388  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000388  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000108  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000fd  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000015c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000baa  00000000  00000000  00001683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000001a9  00000000  00000000  0000222d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003265  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000563b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  00005680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0000574c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000368 	.word	0x08000368

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000368 	.word	0x08000368

08000204 <gpio_init>:

#define GPIOB7 (1U<<7)
#define GPIOC13 (1U<<13)

void gpio_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	//enable clock access to GPIO ports B and c


		RCC_AHB1ENR |= GPIOBEN;
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <gpio_init+0x58>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a13      	ldr	r2, [pc, #76]	@ (800025c <gpio_init+0x58>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6013      	str	r3, [r2, #0]
		RCC_AHB1ENR |= GPIOCEN;
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <gpio_init+0x58>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a10      	ldr	r2, [pc, #64]	@ (800025c <gpio_init+0x58>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6013      	str	r3, [r2, #0]


		GPIOB_MODER |= (1U<<14);
 8000220:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <gpio_init+0x5c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <gpio_init+0x5c>)
 8000226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800022a:	6013      	str	r3, [r2, #0]
		GPIOB_MODER &= ~(1U<<15);
 800022c:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <gpio_init+0x5c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0b      	ldr	r2, [pc, #44]	@ (8000260 <gpio_init+0x5c>)
 8000232:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000236:	6013      	str	r3, [r2, #0]

		GPIOC_MODER &= ~(1U<<26);
 8000238:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <gpio_init+0x60>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a09      	ldr	r2, [pc, #36]	@ (8000264 <gpio_init+0x60>)
 800023e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000242:	6013      	str	r3, [r2, #0]
		GPIOC_MODER &= ~(1U<<27);
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <gpio_init+0x60>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a06      	ldr	r2, [pc, #24]	@ (8000264 <gpio_init+0x60>)
 800024a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800024e:	6013      	str	r3, [r2, #0]



}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023830 	.word	0x40023830
 8000260:	40020400 	.word	0x40020400
 8000264:	40020800 	.word	0x40020800

08000268 <delay>:



void delay(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
	for(int x=0;x<500000;x++);
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	e002      	b.n	800027a <delay+0x12>
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3301      	adds	r3, #1
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a04      	ldr	r2, [pc, #16]	@ (8000290 <delay+0x28>)
 800027e:	4293      	cmp	r3, r2
 8000280:	ddf8      	ble.n	8000274 <delay+0xc>
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	0007a11f 	.word	0x0007a11f

08000294 <check_state>:
void check_state(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	if(GPIOC_IDR && GPIOC13)
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <check_state+0x20>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d007      	beq.n	80002b0 <check_state+0x1c>
	{
		GPIOB_ODR ^=(GPIOB7);
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <check_state+0x24>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <check_state+0x24>)
 80002a6:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 80002aa:	6013      	str	r3, [r2, #0]
		delay();
 80002ac:	f7ff ffdc 	bl	8000268 <delay>
	}
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40020810 	.word	0x40020810
 80002b8:	40020414 	.word	0x40020414

080002bc <main>:
#include "gpio.h"

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	gpio_init();
 80002c0:	f7ff ffa0 	bl	8000204 <gpio_init>

	while(1)
	{
		check_state();
 80002c4:	f7ff ffe6 	bl	8000294 <check_state>
 80002c8:	e7fc      	b.n	80002c4 <main+0x8>
	...

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ffdd 	bl	80002bc <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4d0d      	ldr	r5, [pc, #52]	@ (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	@ (800035c <__libc_init_array+0x3c>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2600      	movs	r6, #0
 800032c:	42a6      	cmp	r6, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4d0b      	ldr	r5, [pc, #44]	@ (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	@ (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2600      	movs	r6, #0
 800033e:	42a6      	cmp	r6, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f855 3b04 	ldr.w	r3, [r5], #4
 8000348:	4798      	blx	r3
 800034a:	3601      	adds	r6, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000352:	4798      	blx	r3
 8000354:	3601      	adds	r6, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
