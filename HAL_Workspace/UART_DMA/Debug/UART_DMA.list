
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004954  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b44  08004b44  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b4c  08004b4c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b4c  08004b4c  00005b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b50  08004b50  00005b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004b54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000010  08004b64  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08004b64  00006638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4f7  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e8  00000000  00000000  00013537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00015620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082b  00000000  00000000  000160c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002177e  00000000  00000000  000168f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9f8  00000000  00000000  00038071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca68c  00000000  00000000  00045a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001100f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c20  00000000  00000000  00110138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00112d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004b00 	.word	0x08004b00

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08004b00 	.word	0x08004b00

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HAL_UART_TxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a07      	ldr	r2, [pc, #28]	@ (800056c <HAL_UART_TxCpltCallback+0x2c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d105      	bne.n	800055e <HAL_UART_TxCpltCallback+0x1e>
	{
		txcnt++;
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <HAL_UART_TxCpltCallback+0x30>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <HAL_UART_TxCpltCallback+0x30>)
 800055c:	801a      	strh	r2, [r3, #0]
	}
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40004800 	.word	0x40004800
 8000570:	2000062e 	.word	0x2000062e

08000574 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10d      	bne.n	80005a6 <HAL_UARTEx_RxEventCallback+0x32>
		{
			rxcnt++;
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_UARTEx_RxEventCallback+0x40>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <HAL_UARTEx_RxEventCallback+0x40>)
 8000594:	801a      	strh	r2, [r3, #0]
			rxlen=Size;
 8000596:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	8013      	strh	r3, [r2, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*)rxdata, 20);
 800059c:	2214      	movs	r2, #20
 800059e:	4907      	ldr	r1, [pc, #28]	@ (80005bc <HAL_UARTEx_RxEventCallback+0x48>)
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005a2:	f002 fe1f 	bl	80031e4 <HAL_UARTEx_ReceiveToIdle_DMA>
		}
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40004800 	.word	0x40004800
 80005b4:	2000062c 	.word	0x2000062c
 80005b8:	20000630 	.word	0x20000630
 80005bc:	20000618 	.word	0x20000618
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b598      	push	{r3, r4, r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fb9c 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f822 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f90c 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 f8e2 	bl	800079c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005d8:	f000 f888 	bl	80006ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005dc:	f000 f8b0 	bl	8000740 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*)rxdata, 20);
 80005e0:	2214      	movs	r2, #20
 80005e2:	4909      	ldr	r1, [pc, #36]	@ (8000608 <main+0x44>)
 80005e4:	4809      	ldr	r0, [pc, #36]	@ (800060c <main+0x48>)
 80005e6:	f002 fdfd 	bl	80031e4 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)txdata, strlen(txdata));
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <main+0x4c>)
 80005ec:	681c      	ldr	r4, [r3, #0]
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <main+0x4c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe06 	bl	8000204 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	4621      	mov	r1, r4
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <main+0x48>)
 8000602:	f002 fd73 	bl	80030ec <HAL_UART_Transmit_DMA>
 8000606:	e7f0      	b.n	80005ea <main+0x26>
 8000608:	20000618 	.word	0x20000618
 800060c:	2000002c 	.word	0x2000002c
 8000610:	20000000 	.word	0x20000000

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2234      	movs	r2, #52	@ 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fa40 	bl	8004aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a28      	ldr	r2, [pc, #160]	@ (80006e4 <SystemClock_Config+0xd0>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd4>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	@ 0xa8
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fa37 	bl	8002b10 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a8:	f000 f94e 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fbac 	bl	8001e28 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d6:	f000 f937 	bl	8000948 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <MX_USART3_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_USART3_UART_Init+0x4c>)
 8000724:	f002 fc92 	bl	800304c <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f90b 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000002c 	.word	0x2000002c
 800073c:	40004800 	.word	0x40004800

08000740 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000746:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800074a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2206      	movs	r2, #6
 8000750:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	2202      	movs	r2, #2
 8000756:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000760:	2202      	movs	r2, #2
 8000762:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	2201      	movs	r2, #1
 8000768:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	2201      	movs	r2, #1
 800077a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	f001 fa15 	bl	8001bb2 <HAL_PCD_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f8db 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000134 	.word	0x20000134

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_DMA_Init+0x4c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <MX_DMA_Init+0x4c>)
 80007ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <MX_DMA_Init+0x4c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200c      	movs	r0, #12
 80007c4:	f000 fc0f 	bl	8000fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007c8:	200c      	movs	r0, #12
 80007ca:	f000 fc28 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200e      	movs	r0, #14
 80007d4:	f000 fc07 	bl	8000fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007d8:	200e      	movs	r0, #14
 80007da:	f000 fc20 	bl	800101e <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	@ 0x30
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a4b      	ldr	r2, [pc, #300]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b45      	ldr	r3, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a44      	ldr	r2, [pc, #272]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b42      	ldr	r3, [pc, #264]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b3e      	ldr	r3, [pc, #248]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a3d      	ldr	r2, [pc, #244]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a36      	ldr	r2, [pc, #216]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b30      	ldr	r3, [pc, #192]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a2f      	ldr	r2, [pc, #188]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008b0:	4822      	ldr	r0, [pc, #136]	@ (800093c <MX_GPIO_Init+0x150>)
 80008b2:	f001 f965 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2140      	movs	r1, #64	@ 0x40
 80008ba:	4821      	ldr	r0, [pc, #132]	@ (8000940 <MX_GPIO_Init+0x154>)
 80008bc:	f001 f960 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	481b      	ldr	r0, [pc, #108]	@ (8000944 <MX_GPIO_Init+0x158>)
 80008d8:	f000 ffbe 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008dc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <MX_GPIO_Init+0x150>)
 80008f6:	f000 ffaf 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	@ (8000940 <MX_GPIO_Init+0x154>)
 8000912:	f000 ffa1 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_GPIO_Init+0x154>)
 800092a:	f000 ff95 	bl	8001858 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	@ 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40021800 	.word	0x40021800
 8000944:	40020800 	.word	0x40020800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	@ 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a4c      	ldr	r2, [pc, #304]	@ (8000af4 <HAL_UART_MspInit+0x150>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	f040 8091 	bne.w	8000aea <HAL_UART_MspInit+0x146>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	4b4a      	ldr	r3, [pc, #296]	@ (8000af8 <HAL_UART_MspInit+0x154>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	4a49      	ldr	r2, [pc, #292]	@ (8000af8 <HAL_UART_MspInit+0x154>)
 80009d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d8:	4b47      	ldr	r3, [pc, #284]	@ (8000af8 <HAL_UART_MspInit+0x154>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <HAL_UART_MspInit+0x154>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	4a42      	ldr	r2, [pc, #264]	@ (8000af8 <HAL_UART_MspInit+0x154>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f4:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <HAL_UART_MspInit+0x154>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4837      	ldr	r0, [pc, #220]	@ (8000afc <HAL_UART_MspInit+0x158>)
 8000a1e:	f000 ff1b 	bl	8001858 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a24:	4a37      	ldr	r2, [pc, #220]	@ (8000b04 <HAL_UART_MspInit+0x160>)
 8000a26:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000a28:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a2e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a30:	4b33      	ldr	r3, [pc, #204]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a36:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3c:	4b30      	ldr	r3, [pc, #192]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a42:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a44:	4b2e      	ldr	r3, [pc, #184]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000a50:	4b2b      	ldr	r3, [pc, #172]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a56:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a5c:	4b28      	ldr	r3, [pc, #160]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a62:	4827      	ldr	r0, [pc, #156]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a64:	f000 faf6 	bl	8001054 <HAL_DMA_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a6e:	f7ff ff6b 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000a80:	4a22      	ldr	r2, [pc, #136]	@ (8000b0c <HAL_UART_MspInit+0x168>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000a84:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000a8e:	2240      	movs	r2, #64	@ 0x40
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000abe:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000ac0:	f000 fac8 	bl	8001054 <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000aca:	f7ff ff3d 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b08 <HAL_UART_MspInit+0x164>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2027      	movs	r0, #39	@ 0x27
 8000ae0:	f000 fa81 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ae4:	2027      	movs	r0, #39	@ 0x27
 8000ae6:	f000 fa9a 	bl	800101e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	@ 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004800 	.word	0x40004800
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	20000074 	.word	0x20000074
 8000b04:	40026028 	.word	0x40026028
 8000b08:	200000d4 	.word	0x200000d4
 8000b0c:	40026058 	.word	0x40026058

08000b10 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0a0      	sub	sp, #128	@ 0x80
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	225c      	movs	r2, #92	@ 0x5c
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 ffb9 	bl	8004aa8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b3e:	d14e      	bne.n	8000bde <HAL_PCD_MspInit+0xce>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b46:	2300      	movs	r3, #0
 8000b48:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fa84 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000b5a:	f7ff fef5 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a20      	ldr	r2, [pc, #128]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b7a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b94:	4619      	mov	r1, r3
 8000b96:	4815      	ldr	r0, [pc, #84]	@ (8000bec <HAL_PCD_MspInit+0xdc>)
 8000b98:	f000 fe5e 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480e      	ldr	r0, [pc, #56]	@ (8000bec <HAL_PCD_MspInit+0xdc>)
 8000bb2:	f000 fe51 	bl	8001858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bba:	4a0b      	ldr	r2, [pc, #44]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd2:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_PCD_MspInit+0xd8>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000bde:	bf00      	nop
 8000be0:	3780      	adds	r7, #128	@ 0x80
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 f8af 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <DMA1_Stream1_IRQHandler+0x10>)
 8000c56:	f000 fb95 	bl	8001384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000074 	.word	0x20000074

08000c64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <DMA1_Stream3_IRQHandler+0x10>)
 8000c6a:	f000 fb8b 	bl	8001384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000d4 	.word	0x200000d4

08000c78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <USART3_IRQHandler+0x10>)
 8000c7e:	f002 fb0b 	bl	8003298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000002c 	.word	0x2000002c

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cb4:	f7ff ffea 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f003 feeb 	bl	8004ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fc6f 	bl	80005c4 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cf4:	08004b54 	.word	0x08004b54
  ldr r2, =_sbss
 8000cf8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cfc:	20000638 	.word	0x20000638

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f94f 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe0c 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f967 	bl	800103a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f92f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	20000008 	.word	0x20000008

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000634 	.word	0x20000634

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000634 	.word	0x20000634

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	@ (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	@ (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff feb6 	bl	8000dd0 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e099      	b.n	80011a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0201 	bic.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001090:	e00f      	b.n	80010b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001092:	f7ff fe9d 	bl	8000dd0 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b05      	cmp	r3, #5
 800109e:	d908      	bls.n	80010b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2220      	movs	r2, #32
 80010a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e078      	b.n	80011a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e8      	bne.n	8001092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	4b38      	ldr	r3, [pc, #224]	@ (80011ac <HAL_DMA_Init+0x158>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4313      	orrs	r3, r2
 8001102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	2b04      	cmp	r3, #4
 800110a:	d107      	bne.n	800111c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	4313      	orrs	r3, r2
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4313      	orrs	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f023 0307 	bic.w	r3, r3, #7
 8001132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001142:	2b04      	cmp	r3, #4
 8001144:	d117      	bne.n	8001176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00e      	beq.n	8001176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fb01 	bl	8001760 <DMA_CheckFifoParam>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2240      	movs	r2, #64	@ 0x40
 8001168:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001172:	2301      	movs	r3, #1
 8001174:	e016      	b.n	80011a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fab8 	bl	80016f4 <DMA_CalcBaseAndBitshift>
 8001184:	4603      	mov	r3, r0
 8001186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800118c:	223f      	movs	r2, #63	@ 0x3f
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f010803f 	.word	0xf010803f

080011b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_DMA_Start_IT+0x26>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e040      	b.n	8001258 <HAL_DMA_Start_IT+0xa8>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d12f      	bne.n	800124a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2202      	movs	r2, #2
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fa4a 	bl	8001698 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001208:	223f      	movs	r2, #63	@ 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0216 	orr.w	r2, r2, #22
 800121e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0208 	orr.w	r2, r2, #8
 8001236:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e005      	b.n	8001256 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001252:	2302      	movs	r3, #2
 8001254:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001256:	7dfb      	ldrb	r3, [r7, #23]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800126e:	f7ff fdaf 	bl	8000dd0 <HAL_GetTick>
 8001272:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e052      	b.n	8001338 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0216 	bic.w	r2, r2, #22
 80012a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <HAL_DMA_Abort+0x62>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0208 	bic.w	r2, r2, #8
 80012d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0201 	bic.w	r2, r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e2:	e013      	b.n	800130c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012e4:	f7ff fd74 	bl	8000dd0 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d90c      	bls.n	800130c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2220      	movs	r2, #32
 80012f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e015      	b.n	8001338 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1e4      	bne.n	80012e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131e:	223f      	movs	r2, #63	@ 0x3f
 8001320:	409a      	lsls	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d004      	beq.n	800135e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00c      	b.n	8001378 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0201 	bic.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001390:	4b8e      	ldr	r3, [pc, #568]	@ (80015cc <HAL_DMA_IRQHandler+0x248>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a8e      	ldr	r2, [pc, #568]	@ (80015d0 <HAL_DMA_IRQHandler+0x24c>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0a9b      	lsrs	r3, r3, #10
 800139c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ae:	2208      	movs	r2, #8
 80013b0:	409a      	lsls	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01a      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0204 	bic.w	r2, r2, #4
 80013d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013dc:	2208      	movs	r2, #8
 80013de:	409a      	lsls	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f4:	2201      	movs	r2, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d012      	beq.n	8001426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001412:	2201      	movs	r2, #1
 8001414:	409a      	lsls	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141e:	f043 0202 	orr.w	r2, r3, #2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142a:	2204      	movs	r2, #4
 800142c:	409a      	lsls	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d012      	beq.n	800145c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00b      	beq.n	800145c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001448:	2204      	movs	r2, #4
 800144a:	409a      	lsls	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001454:	f043 0204 	orr.w	r2, r3, #4
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	2210      	movs	r2, #16
 8001462:	409a      	lsls	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d043      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d03c      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147e:	2210      	movs	r2, #16
 8001480:	409a      	lsls	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d018      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d108      	bne.n	80014b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d024      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	4798      	blx	r3
 80014b2:	e01f      	b.n	80014f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01b      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
 80014c4:	e016      	b.n	80014f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0208 	bic.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f8:	2220      	movs	r2, #32
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 808f 	beq.w	8001624 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 8087 	beq.w	8001624 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151a:	2220      	movs	r2, #32
 800151c:	409a      	lsls	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b05      	cmp	r3, #5
 800152c:	d136      	bne.n	800159c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0216 	bic.w	r2, r2, #22
 800153c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800154c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d103      	bne.n	800155e <HAL_DMA_IRQHandler+0x1da>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0208 	bic.w	r2, r2, #8
 800156c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001572:	223f      	movs	r2, #63	@ 0x3f
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158e:	2b00      	cmp	r3, #0
 8001590:	d07e      	beq.n	8001690 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
        }
        return;
 800159a:	e079      	b.n	8001690 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01d      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10d      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d031      	beq.n	8001624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
 80015c8:	e02c      	b.n	8001624 <HAL_DMA_IRQHandler+0x2a0>
 80015ca:	bf00      	nop
 80015cc:	20000004 	.word	0x20000004
 80015d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	4798      	blx	r3
 80015e4:	e01e      	b.n	8001624 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10f      	bne.n	8001614 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0210 	bic.w	r2, r2, #16
 8001602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001628:	2b00      	cmp	r3, #0
 800162a:	d032      	beq.n	8001692 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d022      	beq.n	800167e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2205      	movs	r2, #5
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3301      	adds	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	d307      	bcc.n	800166c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f2      	bne.n	8001650 <HAL_DMA_IRQHandler+0x2cc>
 800166a:	e000      	b.n	800166e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800166c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	4798      	blx	r3
 800168e:	e000      	b.n	8001692 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001690:	bf00      	nop
    }
  }
}
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80016b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b40      	cmp	r3, #64	@ 0x40
 80016c4:	d108      	bne.n	80016d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016d6:	e007      	b.n	80016e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	60da      	str	r2, [r3, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	3b10      	subs	r3, #16
 8001704:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <DMA_CalcBaseAndBitshift+0x64>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800170e:	4a13      	ldr	r2, [pc, #76]	@ (800175c <DMA_CalcBaseAndBitshift+0x68>)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d909      	bls.n	8001736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800172a:	f023 0303 	bic.w	r3, r3, #3
 800172e:	1d1a      	adds	r2, r3, #4
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	659a      	str	r2, [r3, #88]	@ 0x58
 8001734:	e007      	b.n	8001746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	aaaaaaab 	.word	0xaaaaaaab
 800175c:	08004b3c 	.word	0x08004b3c

08001760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11f      	bne.n	80017ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d856      	bhi.n	800182e <DMA_CheckFifoParam+0xce>
 8001780:	a201      	add	r2, pc, #4	@ (adr r2, 8001788 <DMA_CheckFifoParam+0x28>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	08001799 	.word	0x08001799
 800178c:	080017ab 	.word	0x080017ab
 8001790:	08001799 	.word	0x08001799
 8001794:	0800182f 	.word	0x0800182f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d046      	beq.n	8001832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017a8:	e043      	b.n	8001832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017b2:	d140      	bne.n	8001836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b8:	e03d      	b.n	8001836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017c2:	d121      	bne.n	8001808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d837      	bhi.n	800183a <DMA_CheckFifoParam+0xda>
 80017ca:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <DMA_CheckFifoParam+0x70>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080017e7 	.word	0x080017e7
 80017d8:	080017e1 	.word	0x080017e1
 80017dc:	080017f9 	.word	0x080017f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      break;
 80017e4:	e030      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d025      	beq.n	800183e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f6:	e022      	b.n	800183e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001800:	d11f      	bne.n	8001842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001806:	e01c      	b.n	8001842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d903      	bls.n	8001816 <DMA_CheckFifoParam+0xb6>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d003      	beq.n	800181c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001814:	e018      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
      break;
 800181a:	e015      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00e      	beq.n	8001846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
      break;
 800182c:	e00b      	b.n	8001846 <DMA_CheckFifoParam+0xe6>
      break;
 800182e:	bf00      	nop
 8001830:	e00a      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 8001832:	bf00      	nop
 8001834:	e008      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 8001836:	bf00      	nop
 8001838:	e006      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 800183a:	bf00      	nop
 800183c:	e004      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 800183e:	bf00      	nop
 8001840:	e002      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;   
 8001842:	bf00      	nop
 8001844:	e000      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
    }
  } 
  
  return status; 
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	@ 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e165      	b.n	8001b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8154 	bne.w	8001b3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80ae 	beq.w	8001b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <HAL_GPIO_Init+0x300>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b58 <HAL_GPIO_Init+0x300>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001b58 <HAL_GPIO_Init+0x300>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fa:	4a58      	ldr	r2, [pc, #352]	@ (8001b5c <HAL_GPIO_Init+0x304>)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4f      	ldr	r2, [pc, #316]	@ (8001b60 <HAL_GPIO_Init+0x308>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d025      	beq.n	8001a72 <HAL_GPIO_Init+0x21a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4e      	ldr	r2, [pc, #312]	@ (8001b64 <HAL_GPIO_Init+0x30c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01f      	beq.n	8001a6e <HAL_GPIO_Init+0x216>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4d      	ldr	r2, [pc, #308]	@ (8001b68 <HAL_GPIO_Init+0x310>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d019      	beq.n	8001a6a <HAL_GPIO_Init+0x212>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4c      	ldr	r2, [pc, #304]	@ (8001b6c <HAL_GPIO_Init+0x314>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0x20e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4b      	ldr	r2, [pc, #300]	@ (8001b70 <HAL_GPIO_Init+0x318>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00d      	beq.n	8001a62 <HAL_GPIO_Init+0x20a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4a      	ldr	r2, [pc, #296]	@ (8001b74 <HAL_GPIO_Init+0x31c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <HAL_GPIO_Init+0x206>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a49      	ldr	r2, [pc, #292]	@ (8001b78 <HAL_GPIO_Init+0x320>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_Init+0x202>
 8001a56:	2306      	movs	r3, #6
 8001a58:	e00c      	b.n	8001a74 <HAL_GPIO_Init+0x21c>
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	e00a      	b.n	8001a74 <HAL_GPIO_Init+0x21c>
 8001a5e:	2305      	movs	r3, #5
 8001a60:	e008      	b.n	8001a74 <HAL_GPIO_Init+0x21c>
 8001a62:	2304      	movs	r3, #4
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x21c>
 8001a66:	2303      	movs	r3, #3
 8001a68:	e004      	b.n	8001a74 <HAL_GPIO_Init+0x21c>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_Init+0x21c>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x21c>
 8001a72:	2300      	movs	r3, #0
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	f002 0203 	and.w	r2, r2, #3
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a84:	4935      	ldr	r1, [pc, #212]	@ (8001b5c <HAL_GPIO_Init+0x304>)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a92:	4b3a      	ldr	r3, [pc, #232]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab6:	4a31      	ldr	r2, [pc, #196]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001abc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae0:	4a26      	ldr	r2, [pc, #152]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b34:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	f67f ae96 	bls.w	8001874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3724      	adds	r7, #36	@ 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40021400 	.word	0x40021400
 8001b78:	40021800 	.word	0x40021800
 8001b7c:	40013c00 	.word	0x40013c00

08001b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b9c:	e003      	b.n	8001ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	041a      	lsls	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af02      	add	r7, sp, #8
 8001bb8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e108      	b.n	8001dd6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe ff96 	bl	8000b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bf2:	d102      	bne.n	8001bfa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fcb6 	bl	8004570 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7c1a      	ldrb	r2, [r3, #16]
 8001c0c:	f88d 2000 	strb.w	r2, [sp]
 8001c10:	3304      	adds	r3, #4
 8001c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c14:	f002 fc48 	bl	80044a8 <USB_CoreInit>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0d5      	b.n	8001dd6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fcae 	bl	8004592 <USB_SetCurrentMode>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0c6      	b.n	8001dd6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e04a      	b.n	8001ce4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3315      	adds	r3, #21
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3314      	adds	r3, #20
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	b298      	uxth	r0, r3
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	332e      	adds	r3, #46	@ 0x2e
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3318      	adds	r3, #24
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	331c      	adds	r3, #28
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3320      	adds	r3, #32
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3324      	adds	r3, #36	@ 0x24
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	791b      	ldrb	r3, [r3, #4]
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3af      	bcc.n	8001c4e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	e044      	b.n	8001d7e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	791b      	ldrb	r3, [r3, #4]
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d3b5      	bcc.n	8001cf4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7c1a      	ldrb	r2, [r3, #16]
 8001d90:	f88d 2000 	strb.w	r2, [sp]
 8001d94:	3304      	adds	r3, #4
 8001d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d98:	f002 fc48 	bl	800462c <USB_DevInit>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e013      	b.n	8001dd6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7b1b      	ldrb	r3, [r3, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d102      	bne.n	8001dca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f80a 	bl	8001dde <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 fe03 	bl	80049da <USB_DevDisconnect>

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	f043 0303 	orr.w	r3, r3, #3
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0cc      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b68      	ldr	r3, [pc, #416]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d90c      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b65      	ldr	r3, [pc, #404]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b63      	ldr	r3, [pc, #396]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b8      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e7c:	4b59      	ldr	r3, [pc, #356]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a58      	ldr	r2, [pc, #352]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e94:	4b53      	ldr	r3, [pc, #332]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a52      	ldr	r2, [pc, #328]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b50      	ldr	r3, [pc, #320]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	494d      	ldr	r1, [pc, #308]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d044      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b47      	ldr	r3, [pc, #284]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d119      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e07f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e067      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b37      	ldr	r3, [pc, #220]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4934      	ldr	r1, [pc, #208]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f18:	f7fe ff5a 	bl	8000dd0 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe ff56 	bl	8000dd0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e04f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f48:	4b25      	ldr	r3, [pc, #148]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d20c      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b22      	ldr	r3, [pc, #136]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e032      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4916      	ldr	r1, [pc, #88]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	490e      	ldr	r1, [pc, #56]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fae:	f000 fb7f 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	490a      	ldr	r1, [pc, #40]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	5ccb      	ldrb	r3, [r1, r3]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe feba 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08004b24 	.word	0x08004b24
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002010:	f7ff fff0 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0a9b      	lsrs	r3, r3, #10
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08004b34 	.word	0x08004b34

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002038:	f7ff ffdc 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0b5b      	lsrs	r3, r3, #13
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	@ (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	08004b34 	.word	0x08004b34

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002094:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a2:	496c      	ldr	r1, [pc, #432]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80020b2:	2301      	movs	r3, #1
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80020c2:	4b64      	ldr	r3, [pc, #400]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020c8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d0:	4960      	ldr	r1, [pc, #384]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80020e0:	2301      	movs	r3, #1
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d017      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020f0:	4b58      	ldr	r3, [pc, #352]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4955      	ldr	r1, [pc, #340]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800210e:	d101      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002110:	2301      	movs	r3, #1
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800211c:	2301      	movs	r3, #1
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d017      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800212c:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800212e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002132:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213a:	4946      	ldr	r1, [pc, #280]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800214a:	d101      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800214c:	2301      	movs	r3, #1
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002158:	2301      	movs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 808a 	beq.w	800227e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a38      	ldr	r2, [pc, #224]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b36      	ldr	r3, [pc, #216]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002186:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a33      	ldr	r2, [pc, #204]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002190:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002192:	f7fe fe1d 	bl	8000dd0 <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe fe19 	bl	8000dd0 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e278      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80021ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021b8:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02f      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d028      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021de:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021e0:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021e6:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80021ec:	4a19      	ldr	r2, [pc, #100]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021f2:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d114      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fde7 	bl	8000dd0 <HAL_GetTick>
 8002202:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe fde3 	bl	8000dd0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e240      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ee      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002234:	d114      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800224a:	4902      	ldr	r1, [pc, #8]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
 8002250:	e00c      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	42470e40 	.word	0x42470e40
 8002260:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a49      	ldr	r2, [pc, #292]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002266:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800226e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	4944      	ldr	r1, [pc, #272]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800227a:	4313      	orrs	r3, r2
 800227c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002290:	4b3f      	ldr	r3, [pc, #252]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002292:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80022a0:	4b3a      	ldr	r3, [pc, #232]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	4937      	ldr	r1, [pc, #220]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022c2:	4b32      	ldr	r3, [pc, #200]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d0:	492e      	ldr	r1, [pc, #184]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d011      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ea:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	4926      	ldr	r1, [pc, #152]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002302:	d101      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002304:	2301      	movs	r3, #1
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002314:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	491a      	ldr	r1, [pc, #104]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d011      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002336:	4b15      	ldr	r3, [pc, #84]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002344:	4911      	ldr	r1, [pc, #68]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002354:	d101      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002356:	2301      	movs	r3, #1
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d005      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002368:	f040 80ff 	bne.w	800256a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002372:	f7fe fd2d 	bl	8000dd0 <HAL_GetTick>
 8002376:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002378:	e00e      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800237a:	f7fe fd29 	bl	8000dd0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d907      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e188      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800238c:	40023800 	.word	0x40023800
 8002390:	424711e0 	.word	0x424711e0
 8002394:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002398:	4b7e      	ldr	r3, [pc, #504]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ea      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d028      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d124      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023cc:	4b71      	ldr	r3, [pc, #452]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	3301      	adds	r3, #1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023de:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	431a      	orrs	r2, r3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	3b01      	subs	r3, #1
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	071b      	lsls	r3, r3, #28
 800240e:	4961      	ldr	r1, [pc, #388]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002434:	2b00      	cmp	r3, #0
 8002436:	d035      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002440:	d130      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002442:	4b54      	ldr	r3, [pc, #336]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002454:	4b4f      	ldr	r3, [pc, #316]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800245a:	0f1b      	lsrs	r3, r3, #28
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	019b      	lsls	r3, r3, #6
 800246c:	431a      	orrs	r2, r3
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	3b01      	subs	r3, #1
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	071b      	lsls	r3, r3, #28
 8002484:	4943      	ldr	r1, [pc, #268]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800248c:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800248e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002492:	f023 021f 	bic.w	r2, r3, #31
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	493d      	ldr	r1, [pc, #244]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d029      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024b8:	d124      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024ba:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	3301      	adds	r3, #1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024cc:	4b31      	ldr	r3, [pc, #196]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024d2:	0f1b      	lsrs	r3, r3, #28
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	019b      	lsls	r3, r3, #6
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	431a      	orrs	r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	431a      	orrs	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	071b      	lsls	r3, r3, #28
 80024fc:	4925      	ldr	r1, [pc, #148]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	019b      	lsls	r3, r3, #6
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	3b01      	subs	r3, #1
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	071b      	lsls	r3, r3, #28
 8002536:	4917      	ldr	r1, [pc, #92]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002544:	f7fe fc44 	bl	8000dd0 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800254c:	f7fe fc40 	bl	8000dd0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e09f      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800256a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256c:	2b01      	cmp	r3, #1
 800256e:	f040 8095 	bne.w	800269c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002578:	f7fe fc2a 	bl	8000dd0 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800257e:	e00f      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002580:	f7fe fc26 	bl	8000dd0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d908      	bls.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e085      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	42470068 	.word	0x42470068
 800259c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025a0:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ac:	d0e8      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d02b      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d127      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	019b      	lsls	r3, r3, #6
 80025f2:	431a      	orrs	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	4928      	ldr	r1, [pc, #160]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800260c:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800260e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002612:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	3b01      	subs	r3, #1
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	4922      	ldr	r1, [pc, #136]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01d      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800263a:	d118      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	0e1b      	lsrs	r3, r3, #24
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	019b      	lsls	r3, r3, #6
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	3b01      	subs	r3, #1
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	431a      	orrs	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	4910      	ldr	r1, [pc, #64]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800266e:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002674:	f7fe fbac 	bl	8000dd0 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800267c:	f7fe fba8 	bl	8000dd0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e007      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800269a:	d1ef      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3730      	adds	r7, #48	@ 0x30
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	42470070 	.word	0x42470070

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b0ae      	sub	sp, #184	@ 0xb8
 80026b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d6:	4bcb      	ldr	r3, [pc, #812]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	f200 8206 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x440>
 80026e4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002af1 	.word	0x08002af1
 80026f4:	08002af1 	.word	0x08002af1
 80026f8:	08002af1 	.word	0x08002af1
 80026fc:	08002729 	.word	0x08002729
 8002700:	08002af1 	.word	0x08002af1
 8002704:	08002af1 	.word	0x08002af1
 8002708:	08002af1 	.word	0x08002af1
 800270c:	08002731 	.word	0x08002731
 8002710:	08002af1 	.word	0x08002af1
 8002714:	08002af1 	.word	0x08002af1
 8002718:	08002af1 	.word	0x08002af1
 800271c:	08002921 	.word	0x08002921
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4bb9      	ldr	r3, [pc, #740]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x358>)
 8002722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002726:	e1e7      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4bb8      	ldr	r3, [pc, #736]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x35c>)
 800272a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800272e:	e1e3      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4bb4      	ldr	r3, [pc, #720]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273c:	4bb1      	ldr	r3, [pc, #708]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d071      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002748:	4bae      	ldr	r3, [pc, #696]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002754:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800276a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800276e:	4622      	mov	r2, r4
 8002770:	462b      	mov	r3, r5
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002780:	0150      	lsls	r0, r2, #5
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4621      	mov	r1, r4
 8002788:	1a51      	subs	r1, r2, r1
 800278a:	6439      	str	r1, [r7, #64]	@ 0x40
 800278c:	4629      	mov	r1, r5
 800278e:	eb63 0301 	sbc.w	r3, r3, r1
 8002792:	647b      	str	r3, [r7, #68]	@ 0x44
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027a0:	4649      	mov	r1, r9
 80027a2:	018b      	lsls	r3, r1, #6
 80027a4:	4641      	mov	r1, r8
 80027a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027aa:	4641      	mov	r1, r8
 80027ac:	018a      	lsls	r2, r1, #6
 80027ae:	4641      	mov	r1, r8
 80027b0:	1a51      	subs	r1, r2, r1
 80027b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027b4:	4649      	mov	r1, r9
 80027b6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027c8:	4649      	mov	r1, r9
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	4641      	mov	r1, r8
 80027ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d2:	4641      	mov	r1, r8
 80027d4:	00ca      	lsls	r2, r1, #3
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	4622      	mov	r2, r4
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027e2:	462b      	mov	r3, r5
 80027e4:	460a      	mov	r2, r1
 80027e6:	eb42 0303 	adc.w	r3, r2, r3
 80027ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027f8:	4629      	mov	r1, r5
 80027fa:	024b      	lsls	r3, r1, #9
 80027fc:	4621      	mov	r1, r4
 80027fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002802:	4621      	mov	r1, r4
 8002804:	024a      	lsls	r2, r1, #9
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002814:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002818:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800281c:	f7fd fcfa 	bl	8000214 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800282a:	e067      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282c:	4b75      	ldr	r3, [pc, #468]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002838:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800283c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002846:	2300      	movs	r3, #0
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800284a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002880:	4649      	mov	r1, r9
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4641      	mov	r1, r8
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4641      	mov	r1, r8
 8002890:	ebb2 0a01 	subs.w	sl, r2, r1
 8002894:	4649      	mov	r1, r9
 8002896:	eb63 0b01 	sbc.w	fp, r3, r1
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ae:	4692      	mov	sl, r2
 80028b0:	469b      	mov	fp, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	eb1a 0303 	adds.w	r3, sl, r3
 80028b8:	623b      	str	r3, [r7, #32]
 80028ba:	462b      	mov	r3, r5
 80028bc:	eb4b 0303 	adc.w	r3, fp, r3
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028ce:	4629      	mov	r1, r5
 80028d0:	028b      	lsls	r3, r1, #10
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d8:	4621      	mov	r1, r4
 80028da:	028a      	lsls	r2, r1, #10
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028e4:	2200      	movs	r2, #0
 80028e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80028e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80028ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028ee:	f7fd fc91 	bl	8000214 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4613      	mov	r3, r2
 80028f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028fc:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800290e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800291e:	e0eb      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b38      	ldr	r3, [pc, #224]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d06b      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	2200      	movs	r2, #0
 8002940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002944:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294a:	663b      	str	r3, [r7, #96]	@ 0x60
 800294c:	2300      	movs	r3, #0
 800294e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002950:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002954:	4622      	mov	r2, r4
 8002956:	462b      	mov	r3, r5
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4621      	mov	r1, r4
 800296e:	1a51      	subs	r1, r2, r1
 8002970:	61b9      	str	r1, [r7, #24]
 8002972:	4629      	mov	r1, r5
 8002974:	eb63 0301 	sbc.w	r3, r3, r1
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002986:	4659      	mov	r1, fp
 8002988:	018b      	lsls	r3, r1, #6
 800298a:	4651      	mov	r1, sl
 800298c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002990:	4651      	mov	r1, sl
 8002992:	018a      	lsls	r2, r1, #6
 8002994:	4651      	mov	r1, sl
 8002996:	ebb2 0801 	subs.w	r8, r2, r1
 800299a:	4659      	mov	r1, fp
 800299c:	eb63 0901 	sbc.w	r9, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b4:	4690      	mov	r8, r2
 80029b6:	4699      	mov	r9, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	eb18 0303 	adds.w	r3, r8, r3
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	462b      	mov	r3, r5
 80029c2:	eb49 0303 	adc.w	r3, r9, r3
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029d4:	4629      	mov	r1, r5
 80029d6:	024b      	lsls	r3, r1, #9
 80029d8:	4621      	mov	r1, r4
 80029da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029de:	4621      	mov	r1, r4
 80029e0:	024a      	lsls	r2, r1, #9
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029ea:	2200      	movs	r2, #0
 80029ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029f4:	f7fd fc0e 	bl	8000214 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a02:	e065      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x420>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	2200      	movs	r2, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a20:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a22:	2300      	movs	r3, #0
 8002a24:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	f04f 0000 	mov.w	r0, #0
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	0159      	lsls	r1, r3, #5
 8002a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3c:	0150      	lsls	r0, r2, #5
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4641      	mov	r1, r8
 8002a44:	1a51      	subs	r1, r2, r1
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	4649      	mov	r1, r9
 8002a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	018b      	lsls	r3, r1, #6
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a66:	4651      	mov	r1, sl
 8002a68:	018a      	lsls	r2, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	1a54      	subs	r4, r2, r1
 8002a6e:	4659      	mov	r1, fp
 8002a70:	eb63 0501 	sbc.w	r5, r3, r1
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	00eb      	lsls	r3, r5, #3
 8002a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a82:	00e2      	lsls	r2, r4, #3
 8002a84:	4614      	mov	r4, r2
 8002a86:	461d      	mov	r5, r3
 8002a88:	4643      	mov	r3, r8
 8002a8a:	18e3      	adds	r3, r4, r3
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	464b      	mov	r3, r9
 8002a90:	eb45 0303 	adc.w	r3, r5, r3
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	028b      	lsls	r3, r1, #10
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aac:	4621      	mov	r1, r4
 8002aae:	028a      	lsls	r2, r1, #10
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab8:	2200      	movs	r2, #0
 8002aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002abc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002abe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ac2:	f7fd fba7 	bl	8000214 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4613      	mov	r3, r2
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0f1b      	lsrs	r3, r3, #28
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aee:	e003      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	37b8      	adds	r7, #184	@ 0xb8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	00f42400 	.word	0x00f42400

08002b10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e28d      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8083 	beq.w	8002c36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b30:	4b94      	ldr	r3, [pc, #592]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b3c:	4b91      	ldr	r3, [pc, #580]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b48:	4b8e      	ldr	r3, [pc, #568]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b54:	d00c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b8b      	ldr	r3, [pc, #556]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d112      	bne.n	8002b88 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	4b84      	ldr	r3, [pc, #528]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05b      	beq.n	8002c34 <HAL_RCC_OscConfig+0x124>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d157      	bne.n	8002c34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e25a      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x90>
 8002b92:	4b7c      	ldr	r3, [pc, #496]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7b      	ldr	r2, [pc, #492]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0xcc>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xb4>
 8002baa:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a75      	ldr	r2, [pc, #468]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b73      	ldr	r3, [pc, #460]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a72      	ldr	r2, [pc, #456]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xcc>
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe f8f4 	bl	8000dd0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe f8f0 	bl	8000dd0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e21f      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xdc>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f8e0 	bl	8000dd0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe f8dc 	bl	8000dd0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e20b      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	4b57      	ldr	r3, [pc, #348]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x104>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06f      	beq.n	8002d22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c42:	4b50      	ldr	r3, [pc, #320]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d017      	beq.n	8002c7e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d105      	bne.n	8002c66 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b47      	ldr	r3, [pc, #284]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d11c      	bne.n	8002cac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b44      	ldr	r3, [pc, #272]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x186>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1d3      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b3b      	ldr	r3, [pc, #236]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4937      	ldr	r1, [pc, #220]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	e03a      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <HAL_RCC_OscConfig+0x278>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe f889 	bl	8000dd0 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe f885 	bl	8000dd0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1b4      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b28      	ldr	r3, [pc, #160]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4925      	ldr	r1, [pc, #148]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_OscConfig+0x278>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f868 	bl	8000dd0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe f864 	bl	8000dd0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e193      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d036      	beq.n	8002d9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f848 	bl	8000dd0 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe f844 	bl	8000dd0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e173      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x234>
 8002d62:	e01b      	b.n	8002d9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f831 	bl	8000dd0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	e00e      	b.n	8002d90 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fe f82d 	bl	8000dd0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d907      	bls.n	8002d90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e15c      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	42470000 	.word	0x42470000
 8002d8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b8a      	ldr	r3, [pc, #552]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ea      	bne.n	8002d72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8097 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b83      	ldr	r3, [pc, #524]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dca:	4b7c      	ldr	r3, [pc, #496]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b79      	ldr	r3, [pc, #484]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b76      	ldr	r3, [pc, #472]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a75      	ldr	r2, [pc, #468]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fd ffed 	bl	8000dd0 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fd ffe9 	bl	8000dd0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e118      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x31e>
 8002e20:	4b66      	ldr	r3, [pc, #408]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e24:	4a65      	ldr	r2, [pc, #404]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x358>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x340>
 8002e36:	4b61      	ldr	r3, [pc, #388]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	4a60      	ldr	r2, [pc, #384]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e42:	4b5e      	ldr	r3, [pc, #376]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	4a5d      	ldr	r2, [pc, #372]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0x358>
 8002e50:	4b5a      	ldr	r3, [pc, #360]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e54:	4a59      	ldr	r2, [pc, #356]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5c:	4b57      	ldr	r3, [pc, #348]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a56      	ldr	r2, [pc, #344]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	f023 0304 	bic.w	r3, r3, #4
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fd ffae 	bl	8000dd0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fd ffaa 	bl	8000dd0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0d7      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ee      	beq.n	8002e78 <HAL_RCC_OscConfig+0x368>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fd ff98 	bl	8000dd0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fd ff94 	bl	8000dd0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0c1      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	4b40      	ldr	r3, [pc, #256]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ee      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80ad 	beq.w	800303c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee2:	4b36      	ldr	r3, [pc, #216]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d060      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d145      	bne.n	8002f82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fd ff68 	bl	8000dd0 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fd ff64 	bl	8000dd0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e093      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	4b29      	ldr	r3, [pc, #164]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	491b      	ldr	r1, [pc, #108]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fd ff39 	bl	8000dd0 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fd ff35 	bl	8000dd0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e064      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f74:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x452>
 8002f80:	e05c      	b.n	800303c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fd ff22 	bl	8000dd0 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fd ff1e 	bl	8000dd0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04d      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x480>
 8002fae:	e045      	b.n	800303c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e040      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <HAL_RCC_OscConfig+0x538>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d030      	beq.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d129      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d122      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003000:	4293      	cmp	r3, r2
 8003002:	d119      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	3b01      	subs	r3, #1
 8003012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d10f      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e042      	b.n	80030e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd fc96 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	@ 0x24
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800308e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 ff95 	bl	8003fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	@ 0x30
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	d162      	bne.n	80031cc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_UART_Transmit_DMA+0x26>
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e05b      	b.n	80031ce <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2221      	movs	r2, #33	@ 0x21
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313a:	4a27      	ldr	r2, [pc, #156]	@ (80031d8 <HAL_UART_Transmit_DMA+0xec>)
 800313c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <HAL_UART_Transmit_DMA+0xf0>)
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	4a25      	ldr	r2, [pc, #148]	@ (80031e0 <HAL_UART_Transmit_DMA+0xf4>)
 800314c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	2200      	movs	r2, #0
 8003154:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3304      	adds	r3, #4
 800316a:	461a      	mov	r2, r3
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	f7fe f81f 	bl	80011b0 <HAL_DMA_Start_IT>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2210      	movs	r2, #16
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e021      	b.n	80031ce <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003192:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3314      	adds	r3, #20
 800319a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	617b      	str	r3, [r7, #20]
   return(result);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80031b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3730      	adds	r7, #48	@ 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	0800383d 	.word	0x0800383d
 80031dc:	080038d7 	.word	0x080038d7
 80031e0:	08003a5b 	.word	0x08003a5b

080031e4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	@ 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d146      	bne.n	800328c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e03f      	b.n	800328e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	461a      	mov	r2, r3
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fc65 	bl	8003af0 <UART_Start_Receive_DMA>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	2b01      	cmp	r3, #1
 8003232:	d125      	bne.n	8003280 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	617b      	str	r3, [r7, #20]
   return(result);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f043 0310 	orr.w	r3, r3, #16
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800326a:	627a      	str	r2, [r7, #36]	@ 0x24
 800326c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6a39      	ldr	r1, [r7, #32]
 8003270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	61fb      	str	r3, [r7, #28]
   return(result);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800327e:	e002      	b.n	8003286 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003286:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800328a:	e000      	b.n	800328e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3730      	adds	r7, #48	@ 0x30
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b0ba      	sub	sp, #232	@ 0xe8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80032d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_UART_IRQHandler+0x66>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fda4 	bl	8003e44 <UART_Receive_IT>
      return;
 80032fc:	e273      	b.n	80037e6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80de 	beq.w	80034c4 <HAL_UART_IRQHandler+0x22c>
 8003308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003318:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80d1 	beq.w	80034c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_UART_IRQHandler+0xae>
 800332e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_UART_IRQHandler+0xd2>
 8003352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_UART_IRQHandler+0xf6>
 8003376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f043 0204 	orr.w	r2, r3, #4
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d011      	beq.n	80033be <HAL_UART_IRQHandler+0x126>
 800339a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d105      	bne.n	80033b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 820a 	beq.w	80037dc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_UART_IRQHandler+0x14e>
 80033d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fd2f 	bl	8003e44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f0:	2b40      	cmp	r3, #64	@ 0x40
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_UART_IRQHandler+0x17a>
 800340a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04f      	beq.n	80034b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fc3a 	bl	8003c8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003422:	2b40      	cmp	r3, #64	@ 0x40
 8003424:	d141      	bne.n	80034aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800343c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003452:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800345e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800346a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1d9      	bne.n	8003426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d013      	beq.n	80034a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	4a8a      	ldr	r2, [pc, #552]	@ (80036a8 <HAL_UART_IRQHandler+0x410>)
 8003480:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd ff5a 	bl	8001340 <HAL_DMA_Abort_IT>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800349c:	4610      	mov	r0, r2
 800349e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a0:	e00e      	b.n	80034c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9c0 	bl	8003828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	e00a      	b.n	80034c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9bc 	bl	8003828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e006      	b.n	80034c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9b8 	bl	8003828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80034be:	e18d      	b.n	80037dc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	bf00      	nop
    return;
 80034c2:	e18b      	b.n	80037dc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	f040 8167 	bne.w	800379c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8160 	beq.w	800379c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8159 	beq.w	800379c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	f040 80ce 	bne.w	80036ac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800351c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80a9 	beq.w	8003678 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800352a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800352e:	429a      	cmp	r2, r3
 8003530:	f080 80a2 	bcs.w	8003678 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800353a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003546:	f000 8088 	beq.w	800365a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800357a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800358e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1d9      	bne.n	800354a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3314      	adds	r3, #20
 80035b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e1      	bne.n	8003596 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3314      	adds	r3, #20
 80035d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e3      	bne.n	80035d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800362a:	f023 0310 	bic.w	r3, r3, #16
 800362e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	330c      	adds	r3, #12
 8003638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800363c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800363e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003642:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800364a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e3      	bne.n	8003618 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fe03 	bl	8001260 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003668:	b29b      	uxth	r3, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	b29b      	uxth	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fc ff7f 	bl	8000574 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003676:	e0b3      	b.n	80037e0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800367c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 80ad 	bne.w	80037e0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003690:	f040 80a6 	bne.w	80037e0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fc ff67 	bl	8000574 <HAL_UARTEx_RxEventCallback>
      return;
 80036a6:	e09b      	b.n	80037e0 <HAL_UART_IRQHandler+0x548>
 80036a8:	08003d53 	.word	0x08003d53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 808e 	beq.w	80037e4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80036c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8089 	beq.w	80037e4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80036f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e3      	bne.n	80036d2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3314      	adds	r3, #20
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	623b      	str	r3, [r7, #32]
   return(result);
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3314      	adds	r3, #20
 800372a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800372e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e3      	bne.n	800370a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0310 	bic.w	r3, r3, #16
 8003766:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003774:	61fa      	str	r2, [r7, #28]
 8003776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	69b9      	ldr	r1, [r7, #24]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	617b      	str	r3, [r7, #20]
   return(result);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e3      	bne.n	8003750 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800378e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fc feed 	bl	8000574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800379a:	e023      	b.n	80037e4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <HAL_UART_IRQHandler+0x524>
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fadd 	bl	8003d74 <UART_Transmit_IT>
    return;
 80037ba:	e014      	b.n	80037e6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <HAL_UART_IRQHandler+0x54e>
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb1d 	bl	8003e14 <UART_EndTransmit_IT>
    return;
 80037da:	e004      	b.n	80037e6 <HAL_UART_IRQHandler+0x54e>
    return;
 80037dc:	bf00      	nop
 80037de:	e002      	b.n	80037e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80037e4:	bf00      	nop
  }
}
 80037e6:	37e8      	adds	r7, #232	@ 0xe8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b090      	sub	sp, #64	@ 0x40
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d137      	bne.n	80038c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385a:	2200      	movs	r2, #0
 800385c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800385e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	623b      	str	r3, [r7, #32]
   return(result);
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800387e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e5      	bne.n	800385e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038b2:	61fa      	str	r2, [r7, #28]
 80038b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	69b9      	ldr	r1, [r7, #24]
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	617b      	str	r3, [r7, #20]
   return(result);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038c6:	e002      	b.n	80038ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80038c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038ca:	f7fc fe39 	bl	8000540 <HAL_UART_TxCpltCallback>
}
 80038ce:	bf00      	nop
 80038d0:	3740      	adds	r7, #64	@ 0x40
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff ff81 	bl	80037ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b09c      	sub	sp, #112	@ 0x70
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d172      	bne.n	80039f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800390e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003910:	2200      	movs	r2, #0
 8003912:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800392a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800392c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003934:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003936:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800393a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e5      	bne.n	8003914 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3314      	adds	r3, #20
 800394e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3314      	adds	r3, #20
 8003966:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003968:	647a      	str	r2, [r7, #68]	@ 0x44
 800396a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800396e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3314      	adds	r3, #20
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	623b      	str	r3, [r7, #32]
   return(result);
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003992:	663b      	str	r3, [r7, #96]	@ 0x60
 8003994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800399c:	633a      	str	r2, [r7, #48]	@ 0x30
 800399e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e5      	bne.n	800397c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d119      	bne.n	80039f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0310 	bic.w	r3, r3, #16
 80039d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80039e0:	61fa      	str	r2, [r7, #28]
 80039e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	617b      	str	r3, [r7, #20]
   return(result);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e5      	bne.n	80039c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f6:	2200      	movs	r2, #0
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d106      	bne.n	8003a10 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a06:	4619      	mov	r1, r3
 8003a08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a0a:	f7fc fdb3 	bl	8000574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a0e:	e002      	b.n	8003a16 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003a10:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a12:	f7ff fef5 	bl	8003800 <HAL_UART_RxCpltCallback>
}
 8003a16:	bf00      	nop
 8003a18:	3770      	adds	r7, #112	@ 0x70
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d108      	bne.n	8003a4c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	4619      	mov	r1, r3
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7fc fd95 	bl	8000574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a4a:	e002      	b.n	8003a52 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff fee1 	bl	8003814 <HAL_UART_RxHalfCpltCallback>
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	2b80      	cmp	r3, #128	@ 0x80
 8003a78:	bf0c      	ite	eq
 8003a7a:	2301      	moveq	r3, #1
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b21      	cmp	r3, #33	@ 0x21
 8003a8c:	d108      	bne.n	8003aa0 <UART_DMAError+0x46>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2200      	movs	r2, #0
 8003a98:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003a9a:	68b8      	ldr	r0, [r7, #8]
 8003a9c:	f000 f8ce 	bl	8003c3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aaa:	2b40      	cmp	r3, #64	@ 0x40
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b22      	cmp	r3, #34	@ 0x22
 8003ac0:	d108      	bne.n	8003ad4 <UART_DMAError+0x7a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2200      	movs	r2, #0
 8003acc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003ace:	68b8      	ldr	r0, [r7, #8]
 8003ad0:	f000 f8dc 	bl	8003c8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad8:	f043 0210 	orr.w	r2, r3, #16
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ae0:	68b8      	ldr	r0, [r7, #8]
 8003ae2:	f7ff fea1 	bl	8003828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b098      	sub	sp, #96	@ 0x60
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2222      	movs	r2, #34	@ 0x22
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	4a44      	ldr	r2, [pc, #272]	@ (8003c30 <UART_Start_Receive_DMA+0x140>)
 8003b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	4a43      	ldr	r2, [pc, #268]	@ (8003c34 <UART_Start_Receive_DMA+0x144>)
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	4a42      	ldr	r2, [pc, #264]	@ (8003c38 <UART_Start_Receive_DMA+0x148>)
 8003b2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	2200      	movs	r2, #0
 8003b36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f7fd fb2e 	bl	80011b0 <HAL_DMA_Start_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e05d      	b.n	8003c28 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003baa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e5      	bne.n	8003b8a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003bde:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e5      	bne.n	8003bbe <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	617b      	str	r3, [r7, #20]
   return(result);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c08:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c12:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6a39      	ldr	r1, [r7, #32]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3760      	adds	r7, #96	@ 0x60
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	080038f3 	.word	0x080038f3
 8003c34:	08003a1f 	.word	0x08003a1f
 8003c38:	08003a5b 	.word	0x08003a5b

08003c3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	61ba      	str	r2, [r7, #24]
 8003c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6979      	ldr	r1, [r7, #20]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	613b      	str	r3, [r7, #16]
   return(result);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003c80:	bf00      	nop
 8003c82:	3724      	adds	r7, #36	@ 0x24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b095      	sub	sp, #84	@ 0x54
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3314      	adds	r3, #20
 8003cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e5      	bne.n	8003cc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d119      	bne.n	8003d38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f023 0310 	bic.w	r3, r3, #16
 8003d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d24:	61ba      	str	r2, [r7, #24]
 8003d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6979      	ldr	r1, [r7, #20]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e5      	bne.n	8003d04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d46:	bf00      	nop
 8003d48:	3754      	adds	r7, #84	@ 0x54
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7ff fd5e 	bl	8003828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b21      	cmp	r3, #33	@ 0x21
 8003d86:	d13e      	bne.n	8003e06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d90:	d114      	bne.n	8003dbc <UART_Transmit_IT+0x48>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d110      	bne.n	8003dbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]
 8003dba:	e008      	b.n	8003dce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	1c59      	adds	r1, r3, #1
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6211      	str	r1, [r2, #32]
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003df0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7fc fb83 	bl	8000540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	@ 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b22      	cmp	r3, #34	@ 0x22
 8003e5e:	f040 80aa 	bne.w	8003fb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d115      	bne.n	8003e98 <UART_Receive_IT+0x54>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d111      	bne.n	8003e98 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e96:	e024      	b.n	8003ee2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea6:	d007      	beq.n	8003eb8 <UART_Receive_IT+0x74>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <UART_Receive_IT+0x82>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e008      	b.n	8003ed8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d15d      	bne.n	8003fb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0220 	bic.w	r2, r2, #32
 8003f04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d135      	bne.n	8003fa8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	613b      	str	r3, [r7, #16]
   return(result);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f023 0310 	bic.w	r3, r3, #16
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f62:	623a      	str	r2, [r7, #32]
 8003f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	69f9      	ldr	r1, [r7, #28]
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e5      	bne.n	8003f42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d10a      	bne.n	8003f9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fc fae7 	bl	8000574 <HAL_UARTEx_RxEventCallback>
 8003fa6:	e002      	b.n	8003fae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fc29 	bl	8003800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e002      	b.n	8003fb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3730      	adds	r7, #48	@ 0x30
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc4:	b0c0      	sub	sp, #256	@ 0x100
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	68d9      	ldr	r1, [r3, #12]
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	ea40 0301 	orr.w	r3, r0, r1
 8003fe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004018:	f021 010c 	bic.w	r1, r1, #12
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004026:	430b      	orrs	r3, r1
 8004028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	6999      	ldr	r1, [r3, #24]
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	ea40 0301 	orr.w	r3, r0, r1
 8004046:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b8f      	ldr	r3, [pc, #572]	@ (800428c <UART_SetConfig+0x2cc>)
 8004050:	429a      	cmp	r2, r3
 8004052:	d005      	beq.n	8004060 <UART_SetConfig+0xa0>
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b8d      	ldr	r3, [pc, #564]	@ (8004290 <UART_SetConfig+0x2d0>)
 800405c:	429a      	cmp	r2, r3
 800405e:	d104      	bne.n	800406a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7fd ffe8 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8004064:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004068:	e003      	b.n	8004072 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800406a:	f7fd ffcf 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 800406e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800407c:	f040 810c 	bne.w	8004298 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800408a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800408e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004092:	4622      	mov	r2, r4
 8004094:	462b      	mov	r3, r5
 8004096:	1891      	adds	r1, r2, r2
 8004098:	65b9      	str	r1, [r7, #88]	@ 0x58
 800409a:	415b      	adcs	r3, r3
 800409c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800409e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040a2:	4621      	mov	r1, r4
 80040a4:	eb12 0801 	adds.w	r8, r2, r1
 80040a8:	4629      	mov	r1, r5
 80040aa:	eb43 0901 	adc.w	r9, r3, r1
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040c2:	4690      	mov	r8, r2
 80040c4:	4699      	mov	r9, r3
 80040c6:	4623      	mov	r3, r4
 80040c8:	eb18 0303 	adds.w	r3, r8, r3
 80040cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040d0:	462b      	mov	r3, r5
 80040d2:	eb49 0303 	adc.w	r3, r9, r3
 80040d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040ee:	460b      	mov	r3, r1
 80040f0:	18db      	adds	r3, r3, r3
 80040f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040f4:	4613      	mov	r3, r2
 80040f6:	eb42 0303 	adc.w	r3, r2, r3
 80040fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80040fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004104:	f7fc f886 	bl	8000214 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4b61      	ldr	r3, [pc, #388]	@ (8004294 <UART_SetConfig+0x2d4>)
 800410e:	fba3 2302 	umull	r2, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	011c      	lsls	r4, r3, #4
 8004116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004120:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004124:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	1891      	adds	r1, r2, r2
 800412e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004130:	415b      	adcs	r3, r3
 8004132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004138:	4641      	mov	r1, r8
 800413a:	eb12 0a01 	adds.w	sl, r2, r1
 800413e:	4649      	mov	r1, r9
 8004140:	eb43 0b01 	adc.w	fp, r3, r1
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004150:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004158:	4692      	mov	sl, r2
 800415a:	469b      	mov	fp, r3
 800415c:	4643      	mov	r3, r8
 800415e:	eb1a 0303 	adds.w	r3, sl, r3
 8004162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004166:	464b      	mov	r3, r9
 8004168:	eb4b 0303 	adc.w	r3, fp, r3
 800416c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800417c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004180:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004184:	460b      	mov	r3, r1
 8004186:	18db      	adds	r3, r3, r3
 8004188:	643b      	str	r3, [r7, #64]	@ 0x40
 800418a:	4613      	mov	r3, r2
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	647b      	str	r3, [r7, #68]	@ 0x44
 8004192:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800419a:	f7fc f83b 	bl	8000214 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004294 <UART_SetConfig+0x2d4>)
 80041a6:	fba3 2301 	umull	r2, r3, r3, r1
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2264      	movs	r2, #100	@ 0x64
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	1acb      	subs	r3, r1, r3
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041ba:	4b36      	ldr	r3, [pc, #216]	@ (8004294 <UART_SetConfig+0x2d4>)
 80041bc:	fba3 2302 	umull	r2, r3, r3, r2
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041c8:	441c      	add	r4, r3
 80041ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041e4:	415b      	adcs	r3, r3
 80041e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041ec:	4641      	mov	r1, r8
 80041ee:	1851      	adds	r1, r2, r1
 80041f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80041f2:	4649      	mov	r1, r9
 80041f4:	414b      	adcs	r3, r1
 80041f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004204:	4659      	mov	r1, fp
 8004206:	00cb      	lsls	r3, r1, #3
 8004208:	4651      	mov	r1, sl
 800420a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420e:	4651      	mov	r1, sl
 8004210:	00ca      	lsls	r2, r1, #3
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	4603      	mov	r3, r0
 8004218:	4642      	mov	r2, r8
 800421a:	189b      	adds	r3, r3, r2
 800421c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004220:	464b      	mov	r3, r9
 8004222:	460a      	mov	r2, r1
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004238:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800423c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004240:	460b      	mov	r3, r1
 8004242:	18db      	adds	r3, r3, r3
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004246:	4613      	mov	r3, r2
 8004248:	eb42 0303 	adc.w	r3, r2, r3
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800424e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004256:	f7fb ffdd 	bl	8000214 <__aeabi_uldivmod>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <UART_SetConfig+0x2d4>)
 8004260:	fba3 1302 	umull	r1, r3, r3, r2
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	2164      	movs	r1, #100	@ 0x64
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	3332      	adds	r3, #50	@ 0x32
 8004272:	4a08      	ldr	r2, [pc, #32]	@ (8004294 <UART_SetConfig+0x2d4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	f003 0207 	and.w	r2, r3, #7
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4422      	add	r2, r4
 8004286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004288:	e106      	b.n	8004498 <UART_SetConfig+0x4d8>
 800428a:	bf00      	nop
 800428c:	40011000 	.word	0x40011000
 8004290:	40011400 	.word	0x40011400
 8004294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429c:	2200      	movs	r2, #0
 800429e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042aa:	4642      	mov	r2, r8
 80042ac:	464b      	mov	r3, r9
 80042ae:	1891      	adds	r1, r2, r2
 80042b0:	6239      	str	r1, [r7, #32]
 80042b2:	415b      	adcs	r3, r3
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ba:	4641      	mov	r1, r8
 80042bc:	1854      	adds	r4, r2, r1
 80042be:	4649      	mov	r1, r9
 80042c0:	eb43 0501 	adc.w	r5, r3, r1
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	00eb      	lsls	r3, r5, #3
 80042ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d2:	00e2      	lsls	r2, r4, #3
 80042d4:	4614      	mov	r4, r2
 80042d6:	461d      	mov	r5, r3
 80042d8:	4643      	mov	r3, r8
 80042da:	18e3      	adds	r3, r4, r3
 80042dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e0:	464b      	mov	r3, r9
 80042e2:	eb45 0303 	adc.w	r3, r5, r3
 80042e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004306:	4629      	mov	r1, r5
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004310:	4621      	mov	r1, r4
 8004312:	008a      	lsls	r2, r1, #2
 8004314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004318:	f7fb ff7c 	bl	8000214 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4b60      	ldr	r3, [pc, #384]	@ (80044a4 <UART_SetConfig+0x4e4>)
 8004322:	fba3 2302 	umull	r2, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	011c      	lsls	r4, r3, #4
 800432a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004334:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	1891      	adds	r1, r2, r2
 8004342:	61b9      	str	r1, [r7, #24]
 8004344:	415b      	adcs	r3, r3
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800434c:	4641      	mov	r1, r8
 800434e:	1851      	adds	r1, r2, r1
 8004350:	6139      	str	r1, [r7, #16]
 8004352:	4649      	mov	r1, r9
 8004354:	414b      	adcs	r3, r1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004364:	4659      	mov	r1, fp
 8004366:	00cb      	lsls	r3, r1, #3
 8004368:	4651      	mov	r1, sl
 800436a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800436e:	4651      	mov	r1, sl
 8004370:	00ca      	lsls	r2, r1, #3
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	4603      	mov	r3, r0
 8004378:	4642      	mov	r2, r8
 800437a:	189b      	adds	r3, r3, r2
 800437c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004380:	464b      	mov	r3, r9
 8004382:	460a      	mov	r2, r1
 8004384:	eb42 0303 	adc.w	r3, r2, r3
 8004388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004396:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043a4:	4649      	mov	r1, r9
 80043a6:	008b      	lsls	r3, r1, #2
 80043a8:	4641      	mov	r1, r8
 80043aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ae:	4641      	mov	r1, r8
 80043b0:	008a      	lsls	r2, r1, #2
 80043b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043b6:	f7fb ff2d 	bl	8000214 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	4b38      	ldr	r3, [pc, #224]	@ (80044a4 <UART_SetConfig+0x4e4>)
 80043c2:	fba3 2301 	umull	r2, r3, r3, r1
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2264      	movs	r2, #100	@ 0x64
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	1acb      	subs	r3, r1, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	@ 0x32
 80043d4:	4a33      	ldr	r2, [pc, #204]	@ (80044a4 <UART_SetConfig+0x4e4>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e0:	441c      	add	r4, r3
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80043ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	1891      	adds	r1, r2, r2
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	415b      	adcs	r3, r3
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004400:	4641      	mov	r1, r8
 8004402:	1851      	adds	r1, r2, r1
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	4649      	mov	r1, r9
 8004408:	414b      	adcs	r3, r1
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004418:	4659      	mov	r1, fp
 800441a:	00cb      	lsls	r3, r1, #3
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004422:	4651      	mov	r1, sl
 8004424:	00ca      	lsls	r2, r1, #3
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	4603      	mov	r3, r0
 800442c:	4642      	mov	r2, r8
 800442e:	189b      	adds	r3, r3, r2
 8004430:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004432:	464b      	mov	r3, r9
 8004434:	460a      	mov	r2, r1
 8004436:	eb42 0303 	adc.w	r3, r2, r3
 800443a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	663b      	str	r3, [r7, #96]	@ 0x60
 8004446:	667a      	str	r2, [r7, #100]	@ 0x64
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004454:	4649      	mov	r1, r9
 8004456:	008b      	lsls	r3, r1, #2
 8004458:	4641      	mov	r1, r8
 800445a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800445e:	4641      	mov	r1, r8
 8004460:	008a      	lsls	r2, r1, #2
 8004462:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004466:	f7fb fed5 	bl	8000214 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <UART_SetConfig+0x4e4>)
 8004470:	fba3 1302 	umull	r1, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	2164      	movs	r1, #100	@ 0x64
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	3332      	adds	r3, #50	@ 0x32
 8004482:	4a08      	ldr	r2, [pc, #32]	@ (80044a4 <UART_SetConfig+0x4e4>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	f003 020f 	and.w	r2, r3, #15
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4422      	add	r2, r4
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800449e:	46bd      	mov	sp, r7
 80044a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a4:	51eb851f 	.word	0x51eb851f

080044a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044a8:	b084      	sub	sp, #16
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	f107 001c 	add.w	r0, r7, #28
 80044b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d123      	bne.n	800450a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80044d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa9a 	bl	8004a38 <USB_CoreReset>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e01b      	b.n	8004542 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa8e 	bl	8004a38 <USB_CoreReset>
 800451c:	4603      	mov	r3, r0
 800451e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004520:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38
 8004534:	e005      	b.n	8004542 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004542:	7fbb      	ldrb	r3, [r7, #30]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10b      	bne.n	8004560 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f043 0206 	orr.w	r2, r3, #6
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800456c:	b004      	add	sp, #16
 800456e:	4770      	bx	lr

08004570 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 0201 	bic.w	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d115      	bne.n	80045e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045c0:	200a      	movs	r0, #10
 80045c2:	f7fc fc11 	bl	8000de8 <HAL_Delay>
      ms += 10U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	330a      	adds	r3, #10
 80045ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fa25 	bl	8004a1c <USB_GetMode>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d01e      	beq.n	8004616 <USB_SetCurrentMode+0x84>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2bc7      	cmp	r3, #199	@ 0xc7
 80045dc:	d9f0      	bls.n	80045c0 <USB_SetCurrentMode+0x2e>
 80045de:	e01a      	b.n	8004616 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d115      	bne.n	8004612 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045f2:	200a      	movs	r0, #10
 80045f4:	f7fc fbf8 	bl	8000de8 <HAL_Delay>
      ms += 10U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	330a      	adds	r3, #10
 80045fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa0c 	bl	8004a1c <USB_GetMode>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <USB_SetCurrentMode+0x84>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2bc7      	cmp	r3, #199	@ 0xc7
 800460e:	d9f0      	bls.n	80045f2 <USB_SetCurrentMode+0x60>
 8004610:	e001      	b.n	8004616 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e005      	b.n	8004622 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2bc8      	cmp	r3, #200	@ 0xc8
 800461a:	d101      	bne.n	8004620 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800462c:	b084      	sub	sp, #16
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800463a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	e009      	b.n	8004660 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3340      	adds	r3, #64	@ 0x40
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0e      	cmp	r3, #14
 8004664:	d9f2      	bls.n	800464c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004666:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11c      	bne.n	80046a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004686:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e005      	b.n	80046b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046ba:	461a      	mov	r2, r3
 80046bc:	2300      	movs	r3, #0
 80046be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10d      	bne.n	80046e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046d0:	2100      	movs	r1, #0
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f968 	bl	80049a8 <USB_SetDevSpeed>
 80046d8:	e008      	b.n	80046ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046da:	2101      	movs	r1, #1
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f963 	bl	80049a8 <USB_SetDevSpeed>
 80046e2:	e003      	b.n	80046ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046e4:	2103      	movs	r1, #3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f95e 	bl	80049a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046ec:	2110      	movs	r1, #16
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8fa 	bl	80048e8 <USB_FlushTxFifo>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f924 	bl	800494c <USB_FlushRxFifo>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004714:	461a      	mov	r2, r3
 8004716:	2300      	movs	r3, #0
 8004718:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e043      	b.n	80047c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800474a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800474e:	d118      	bne.n	8004782 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004762:	461a      	mov	r2, r3
 8004764:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e013      	b.n	8004794 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	461a      	mov	r2, r3
 800477a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e008      	b.n	8004794 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478e:	461a      	mov	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	3301      	adds	r3, #1
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047c4:	461a      	mov	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d3b5      	bcc.n	8004738 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	e043      	b.n	800485a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047e8:	d118      	bne.n	800481c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fc:	461a      	mov	r2, r3
 80047fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e013      	b.n	800482e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	461a      	mov	r2, r3
 8004814:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e008      	b.n	800482e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004828:	461a      	mov	r2, r3
 800482a:	2300      	movs	r3, #0
 800482c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483a:	461a      	mov	r2, r3
 800483c:	2300      	movs	r3, #0
 800483e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484c:	461a      	mov	r2, r3
 800484e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004852:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3301      	adds	r3, #1
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800485e:	461a      	mov	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4293      	cmp	r3, r2
 8004864:	d3b5      	bcc.n	80047d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004878:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004886:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004888:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f043 0210 	orr.w	r2, r3, #16
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <USB_DevInit+0x2b8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f043 0208 	orr.w	r2, r3, #8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e0:	b004      	add	sp, #16
 80048e2:	4770      	bx	lr
 80048e4:	803c3800 	.word	0x803c3800

080048e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004902:	d901      	bls.n	8004908 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e01b      	b.n	8004940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	daf2      	bge.n	80048f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	019b      	lsls	r3, r3, #6
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3301      	adds	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800492c:	d901      	bls.n	8004932 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e006      	b.n	8004940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b20      	cmp	r3, #32
 800493c:	d0f0      	beq.n	8004920 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3301      	adds	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004964:	d901      	bls.n	800496a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e018      	b.n	800499c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	daf2      	bge.n	8004958 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2210      	movs	r2, #16
 800497a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004988:	d901      	bls.n	800498e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e006      	b.n	800499c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d0f0      	beq.n	800497c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0301 	and.w	r3, r3, #1
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a50:	d901      	bls.n	8004a56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e022      	b.n	8004a9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	daf2      	bge.n	8004a44 <USB_CoreReset+0xc>

  count = 10U;
 8004a5e:	230a      	movs	r3, #10
 8004a60:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004a62:	e002      	b.n	8004a6a <USB_CoreReset+0x32>
  {
    count--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f9      	bne.n	8004a64 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f043 0201 	orr.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a88:	d901      	bls.n	8004a8e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e006      	b.n	8004a9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d0f0      	beq.n	8004a7c <USB_CoreReset+0x44>

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <memset>:
 8004aa8:	4402      	add	r2, r0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d100      	bne.n	8004ab2 <memset+0xa>
 8004ab0:	4770      	bx	lr
 8004ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab6:	e7f9      	b.n	8004aac <memset+0x4>

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	4d0d      	ldr	r5, [pc, #52]	@ (8004af0 <__libc_init_array+0x38>)
 8004abc:	4c0d      	ldr	r4, [pc, #52]	@ (8004af4 <__libc_init_array+0x3c>)
 8004abe:	1b64      	subs	r4, r4, r5
 8004ac0:	10a4      	asrs	r4, r4, #2
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8004af8 <__libc_init_array+0x40>)
 8004aca:	4c0c      	ldr	r4, [pc, #48]	@ (8004afc <__libc_init_array+0x44>)
 8004acc:	f000 f818 	bl	8004b00 <_init>
 8004ad0:	1b64      	subs	r4, r4, r5
 8004ad2:	10a4      	asrs	r4, r4, #2
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	08004b4c 	.word	0x08004b4c
 8004af4:	08004b4c 	.word	0x08004b4c
 8004af8:	08004b4c 	.word	0x08004b4c
 8004afc:	08004b50 	.word	0x08004b50

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
