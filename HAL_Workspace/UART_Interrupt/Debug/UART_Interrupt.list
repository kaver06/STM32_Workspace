
UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003e68  08003e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e94  08003e94  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e94  08003e94  00004e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e98  08003e98  00004e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003e9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000010  08003eac  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08003eac  00005578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d197  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206d  00000000  00000000  000121d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00014248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000819  00000000  00000000  00014cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002177e  00000000  00000000  000154f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d955  00000000  00000000  00036c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca638  00000000  00000000  000445c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ebfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc4  00000000  00000000  0010ec40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00111804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003e50 	.word	0x08003e50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003e50 	.word	0x08003e50

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HAL_UART_TxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a07      	ldr	r2, [pc, #28]	@ (800056c <HAL_UART_TxCpltCallback+0x2c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d105      	bne.n	800055e <HAL_UART_TxCpltCallback+0x1e>
	{
		txcnt++;
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <HAL_UART_TxCpltCallback+0x30>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <HAL_UART_TxCpltCallback+0x30>)
 800055c:	801a      	strh	r2, [r3, #0]
	}
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40004800 	.word	0x40004800
 8000570:	2000056c 	.word	0x2000056c

08000574 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10d      	bne.n	80005a6 <HAL_UARTEx_RxEventCallback+0x32>
		{
			rxcnt++;
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_UARTEx_RxEventCallback+0x40>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <HAL_UARTEx_RxEventCallback+0x40>)
 8000594:	801a      	strh	r2, [r3, #0]
			rxlen=Size;
 8000596:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	8013      	strh	r3, [r2, #0]
			 HAL_UARTEx_ReceiveToIdle_IT(&huart3, (uint8_t*)rxdata, 20);
 800059c:	2214      	movs	r2, #20
 800059e:	4907      	ldr	r1, [pc, #28]	@ (80005bc <HAL_UARTEx_RxEventCallback+0x48>)
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005a2:	f002 f9c5 	bl	8002930 <HAL_UARTEx_ReceiveToIdle_IT>

		}
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40004800 	.word	0x40004800
 80005b4:	2000056e 	.word	0x2000056e
 80005b8:	20000570 	.word	0x20000570
 80005bc:	20000558 	.word	0x20000558
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b598      	push	{r3, r4, r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 faf8 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f820 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8e2 	bl	8000798 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f888 	bl	80006e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d8:	f000 f8b0 	bl	800073c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, (uint8_t*)rxdata, 20);
 80005dc:	2214      	movs	r2, #20
 80005de:	4909      	ldr	r1, [pc, #36]	@ (8000604 <main+0x40>)
 80005e0:	4809      	ldr	r0, [pc, #36]	@ (8000608 <main+0x44>)
 80005e2:	f002 f9a5 	bl	8002930 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  HAL_UART_Transmit_IT(&huart3, (uint8_t*)txdata, strlen(txdata));
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <main+0x48>)
 80005e8:	681c      	ldr	r4, [r3, #0]
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <main+0x48>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe08 	bl	8000204 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	4621      	mov	r1, r4
 80005fc:	4802      	ldr	r0, [pc, #8]	@ (8000608 <main+0x44>)
 80005fe:	f002 f961 	bl	80028c4 <HAL_UART_Transmit_IT>
 8000602:	e7f0      	b.n	80005e6 <main+0x22>
 8000604:	20000558 	.word	0x20000558
 8000608:	2000002c 	.word	0x2000002c
 800060c:	20000000 	.word	0x20000000

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	@ 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fbea 	bl	8003df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	@ (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <SystemClock_Config+0xd4>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	@ 0xa8
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fe25 	bl	80022e8 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 f926 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ff9a 	bl	8001600 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d2:	f000 f90f 	bl	80008f4 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	@ 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <MX_USART3_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_USART3_UART_Init+0x4c>)
 8000720:	f002 f880 	bl	8002824 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f8e3 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000002c 	.word	0x2000002c
 8000738:	40004800 	.word	0x40004800

0800073c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000746:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2206      	movs	r2, #6
 800074c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2202      	movs	r2, #2
 8000752:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2202      	movs	r2, #2
 800075e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2201      	movs	r2, #1
 8000764:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2201      	movs	r2, #1
 8000776:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	f000 fe03 	bl	800138a <HAL_PCD_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f8b3 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000074 	.word	0x20000074

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b4c      	ldr	r3, [pc, #304]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a4b      	ldr	r2, [pc, #300]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b49      	ldr	r3, [pc, #292]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b45      	ldr	r3, [pc, #276]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a44      	ldr	r2, [pc, #272]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b42      	ldr	r3, [pc, #264]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b3e      	ldr	r3, [pc, #248]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a3d      	ldr	r2, [pc, #244]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b3b      	ldr	r3, [pc, #236]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b37      	ldr	r3, [pc, #220]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a36      	ldr	r2, [pc, #216]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a2f      	ldr	r2, [pc, #188]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a28      	ldr	r2, [pc, #160]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f244 0181 	movw	r1, #16513	@ 0x4081
 800085c:	4822      	ldr	r0, [pc, #136]	@ (80008e8 <MX_GPIO_Init+0x150>)
 800085e:	f000 fd7b 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2140      	movs	r1, #64	@ 0x40
 8000866:	4821      	ldr	r0, [pc, #132]	@ (80008ec <MX_GPIO_Init+0x154>)
 8000868:	f000 fd76 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000872:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	481b      	ldr	r0, [pc, #108]	@ (80008f0 <MX_GPIO_Init+0x158>)
 8000884:	f000 fbd4 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000888:	f244 0381 	movw	r3, #16513	@ 0x4081
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_GPIO_Init+0x150>)
 80008a2:	f000 fbc5 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	@ (80008ec <MX_GPIO_Init+0x154>)
 80008be:	f000 fbb7 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_GPIO_Init+0x154>)
 80008d6:	f000 fbab 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	3730      	adds	r7, #48	@ 0x30
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40021800 	.word	0x40021800
 80008f0:	40020800 	.word	0x40020800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <HAL_UART_MspInit+0x94>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d134      	bne.n	80009dc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_UART_MspInit+0x98>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <HAL_UART_MspInit+0x98>)
 800097c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <HAL_UART_MspInit+0x98>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <HAL_UART_MspInit+0x98>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <HAL_UART_MspInit+0x98>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_UART_MspInit+0x98>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009bc:	2307      	movs	r3, #7
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4809      	ldr	r0, [pc, #36]	@ (80009ec <HAL_UART_MspInit+0x9c>)
 80009c8:	f000 fb32 	bl	8001030 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2027      	movs	r0, #39	@ 0x27
 80009d2:	f000 fa64 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009d6:	2027      	movs	r0, #39	@ 0x27
 80009d8:	f000 fa7d 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	@ 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40004800 	.word	0x40004800
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0a0      	sub	sp, #128	@ 0x80
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	225c      	movs	r2, #92	@ 0x5c
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 f9f1 	bl	8003df8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a1e:	d14e      	bne.n	8000abe <HAL_PCD_MspInit+0xce>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a26:	2300      	movs	r3, #0
 8000a28:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 ff00 	bl	8001834 <HAL_RCCEx_PeriphCLKConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000a3a:	f7ff ff5b 	bl	80008f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a20      	ldr	r2, [pc, #128]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a5a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a74:	4619      	mov	r1, r3
 8000a76:	4815      	ldr	r0, [pc, #84]	@ (8000acc <HAL_PCD_MspInit+0xdc>)
 8000a78:	f000 fada 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480e      	ldr	r0, [pc, #56]	@ (8000acc <HAL_PCD_MspInit+0xdc>)
 8000a92:	f000 facd 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <HAL_PCD_MspInit+0xd8>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000abe:	bf00      	nop
 8000ac0:	3780      	adds	r7, #128	@ 0x80
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f89b 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <USART3_IRQHandler+0x10>)
 8000b36:	f001 ff59 	bl	80029ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000002c 	.word	0x2000002c

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f003 f937 	bl	8003e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fd13 	bl	80005c4 <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bac:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 8000bb0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb4:	20000578 	.word	0x20000578

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f94f 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fe86 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f967 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f92f 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000004 	.word	0x20000004
 8000c58:	2000000c 	.word	0x2000000c
 8000c5c:	20000008 	.word	0x20000008

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	20000574 	.word	0x20000574

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000574 	.word	0x20000574

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff ffee 	bl	8000c88 <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_Delay+0x44>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc6:	bf00      	nop
 8000cc8:	f7ff ffde 	bl	8000c88 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000000c 	.word	0x2000000c

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff3e 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff8e 	bl	8000ddc <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff feb6 	bl	8000c88 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d008      	beq.n	8000f3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e052      	b.n	8000fe2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0216 	bic.w	r2, r2, #22
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d103      	bne.n	8000f6c <HAL_DMA_Abort+0x62>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0208 	bic.w	r2, r2, #8
 8000f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8c:	e013      	b.n	8000fb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f8e:	f7ff fe7b 	bl	8000c88 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d90c      	bls.n	8000fb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e015      	b.n	8000fe2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e4      	bne.n	8000f8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc8:	223f      	movs	r2, #63	@ 0x3f
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d004      	beq.n	8001008 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e00c      	b.n	8001022 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2205      	movs	r2, #5
 800100c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e165      	b.n	8001318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8154 	bne.w	8001312 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80ae 	beq.w	8001312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001330 <HAL_GPIO_Init+0x300>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	4a5c      	ldr	r2, [pc, #368]	@ (8001330 <HAL_GPIO_Init+0x300>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001330 <HAL_GPIO_Init+0x300>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a58      	ldr	r2, [pc, #352]	@ (8001334 <HAL_GPIO_Init+0x304>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001338 <HAL_GPIO_Init+0x308>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d025      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4e      	ldr	r2, [pc, #312]	@ (800133c <HAL_GPIO_Init+0x30c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4d      	ldr	r2, [pc, #308]	@ (8001340 <HAL_GPIO_Init+0x310>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4c      	ldr	r2, [pc, #304]	@ (8001344 <HAL_GPIO_Init+0x314>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x20e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4b      	ldr	r2, [pc, #300]	@ (8001348 <HAL_GPIO_Init+0x318>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x20a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4a      	ldr	r2, [pc, #296]	@ (800134c <HAL_GPIO_Init+0x31c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x206>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a49      	ldr	r2, [pc, #292]	@ (8001350 <HAL_GPIO_Init+0x320>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x202>
 800122e:	2306      	movs	r3, #6
 8001230:	e00c      	b.n	800124c <HAL_GPIO_Init+0x21c>
 8001232:	2307      	movs	r3, #7
 8001234:	e00a      	b.n	800124c <HAL_GPIO_Init+0x21c>
 8001236:	2305      	movs	r3, #5
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x21c>
 800123a:	2304      	movs	r3, #4
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x21c>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x21c>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x21c>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x21c>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	@ (8001334 <HAL_GPIO_Init+0x304>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <HAL_GPIO_Init+0x324>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a31      	ldr	r2, [pc, #196]	@ (8001354 <HAL_GPIO_Init+0x324>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <HAL_GPIO_Init+0x324>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a26      	ldr	r2, [pc, #152]	@ (8001354 <HAL_GPIO_Init+0x324>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012be:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <HAL_GPIO_Init+0x324>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <HAL_GPIO_Init+0x324>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_GPIO_Init+0x324>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130c:	4a11      	ldr	r2, [pc, #68]	@ (8001354 <HAL_GPIO_Init+0x324>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f ae96 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40021400 	.word	0x40021400
 8001350:	40021800 	.word	0x40021800
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af02      	add	r7, sp, #8
 8001390:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e108      	b.n	80015ae <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fb1a 	bl	80009f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013ca:	d102      	bne.n	80013d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fa72 	bl	80038c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7c1a      	ldrb	r2, [r3, #16]
 80013e4:	f88d 2000 	strb.w	r2, [sp]
 80013e8:	3304      	adds	r3, #4
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	f002 fa04 	bl	80037f8 <USB_CoreInit>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0d5      	b.n	80015ae <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fa6a 	bl	80038e2 <USB_SetCurrentMode>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0c6      	b.n	80015ae <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e04a      	b.n	80014bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3315      	adds	r3, #21
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	3314      	adds	r3, #20
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	b298      	uxth	r0, r3
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	332e      	adds	r3, #46	@ 0x2e
 8001462:	4602      	mov	r2, r0
 8001464:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3318      	adds	r3, #24
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	331c      	adds	r3, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3320      	adds	r3, #32
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3324      	adds	r3, #36	@ 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3af      	bcc.n	8001426 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e044      	b.n	8001556 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	3301      	adds	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	791b      	ldrb	r3, [r3, #4]
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	429a      	cmp	r2, r3
 800155e:	d3b5      	bcc.n	80014cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7c1a      	ldrb	r2, [r3, #16]
 8001568:	f88d 2000 	strb.w	r2, [sp]
 800156c:	3304      	adds	r3, #4
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	f002 fa04 	bl	800397c <USB_DevInit>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2202      	movs	r2, #2
 800157e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e013      	b.n	80015ae <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7b1b      	ldrb	r3, [r3, #12]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d102      	bne.n	80015a2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f80a 	bl	80015b6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fbbf 	bl	8003d2a <USB_DevDisconnect>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b085      	sub	sp, #20
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	f043 0303 	orr.w	r3, r3, #3
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0cc      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b68      	ldr	r3, [pc, #416]	@ (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d90c      	bls.n	800163c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b65      	ldr	r3, [pc, #404]	@ (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b63      	ldr	r3, [pc, #396]	@ (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0b8      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001654:	4b59      	ldr	r3, [pc, #356]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a58      	ldr	r2, [pc, #352]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800165e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800166c:	4b53      	ldr	r3, [pc, #332]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a52      	ldr	r2, [pc, #328]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	4b50      	ldr	r3, [pc, #320]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	494d      	ldr	r1, [pc, #308]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	4313      	orrs	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d044      	beq.n	8001720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b47      	ldr	r3, [pc, #284]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d119      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e07f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d003      	beq.n	80016be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b3f      	ldr	r3, [pc, #252]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e06f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e067      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016de:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 0203 	bic.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4934      	ldr	r1, [pc, #208]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff faca 	bl	8000c88 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff fac6 	bl	8000c88 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e04f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 020c 	and.w	r2, r3, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1eb      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b25      	ldr	r3, [pc, #148]	@ (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d20c      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e032      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4916      	ldr	r1, [pc, #88]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001772:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	490e      	ldr	r1, [pc, #56]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001786:	f000 fb7f 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 800178a:	4602      	mov	r2, r0
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	490a      	ldr	r1, [pc, #40]	@ (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	5ccb      	ldrb	r3, [r1, r3]
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	4a09      	ldr	r2, [pc, #36]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fa2a 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08003e74 	.word	0x08003e74
 80017c4:	20000004 	.word	0x20000004
 80017c8:	20000008 	.word	0x20000008

080017cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017e8:	f7ff fff0 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	0a9b      	lsrs	r3, r3, #10
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	4903      	ldr	r1, [pc, #12]	@ (8001808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	08003e84 	.word	0x08003e84

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001810:	f7ff ffdc 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0b5b      	lsrs	r3, r3, #13
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	@ (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	08003e84 	.word	0x08003e84

08001834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	@ 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d010      	beq.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800186c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001872:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187a:	496c      	ldr	r1, [pc, #432]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800188a:	2301      	movs	r3, #1
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800189a:	4b64      	ldr	r3, [pc, #400]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800189c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a8:	4960      	ldr	r1, [pc, #384]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d017      	beq.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018c8:	4b58      	ldr	r3, [pc, #352]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4955      	ldr	r1, [pc, #340]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018e6:	d101      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80018e8:	2301      	movs	r3, #1
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d017      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001904:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800190a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001912:	4946      	ldr	r1, [pc, #280]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001914:	4313      	orrs	r3, r2
 8001916:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001922:	d101      	bne.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001924:	2301      	movs	r3, #1
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 808a 	beq.w	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b39      	ldr	r3, [pc, #228]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a38      	ldr	r2, [pc, #224]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b36      	ldr	r3, [pc, #216]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800195e:	4b34      	ldr	r3, [pc, #208]	@ (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a33      	ldr	r2, [pc, #204]	@ (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001968:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800196a:	f7ff f98d 	bl	8000c88 <HAL_GetTick>
 800196e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff f989 	bl	8000c88 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e278      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001998:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d02f      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d028      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019b6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80019c4:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d114      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff f957 	bl	8000c88 <HAL_GetTick>
 80019da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff f953 	bl	8000c88 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e240      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ee      	beq.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a0c:	d114      	bne.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a22:	4902      	ldr	r1, [pc, #8]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
 8001a28:	e00c      	b.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000
 8001a34:	42470e40 	.word	0x42470e40
 8001a38:	4b4a      	ldr	r3, [pc, #296]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a49      	ldr	r2, [pc, #292]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a3e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001a42:	6093      	str	r3, [r2, #8]
 8001a44:	4b47      	ldr	r3, [pc, #284]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a50:	4944      	ldr	r1, [pc, #272]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001a68:	4b3f      	ldr	r3, [pc, #252]	@ (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001a6a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00a      	beq.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a78:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4937      	ldr	r1, [pc, #220]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00a      	beq.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa8:	492e      	ldr	r1, [pc, #184]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d011      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001abc:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aca:	4926      	ldr	r1, [pc, #152]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	491a      	ldr	r1, [pc, #104]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d011      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b1c:	4911      	ldr	r1, [pc, #68]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d005      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b40:	f040 80ff 	bne.w	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b4a:	f7ff f89d 	bl	8000c88 <HAL_GetTick>
 8001b4e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b50:	e00e      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b52:	f7ff f899 	bl	8000c88 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d907      	bls.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e188      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b64:	40023800 	.word	0x40023800
 8001b68:	424711e0 	.word	0x424711e0
 8001b6c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b70:	4b7e      	ldr	r3, [pc, #504]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ea      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d028      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d124      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ba4:	4b71      	ldr	r3, [pc, #452]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001baa:	0c1b      	lsrs	r3, r3, #16
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bbc:	0e1b      	lsrs	r3, r3, #24
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	071b      	lsls	r3, r3, #28
 8001be6:	4961      	ldr	r1, [pc, #388]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c02:	d00a      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d035      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c18:	d130      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c1a:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	3301      	adds	r3, #1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c32:	0f1b      	lsrs	r3, r3, #28
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	019b      	lsls	r3, r3, #6
 8001c44:	431a      	orrs	r2, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	431a      	orrs	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	071b      	lsls	r3, r3, #28
 8001c5c:	4943      	ldr	r1, [pc, #268]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c64:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c6a:	f023 021f 	bic.w	r2, r3, #31
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	493d      	ldr	r1, [pc, #244]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d029      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c90:	d124      	bne.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c92:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ca4:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001caa:	0f1b      	lsrs	r3, r3, #28
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	071b      	lsls	r3, r3, #28
 8001cd4:	4925      	ldr	r1, [pc, #148]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d016      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	019b      	lsls	r3, r3, #6
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	071b      	lsls	r3, r3, #28
 8001d0e:	4917      	ldr	r1, [pc, #92]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7fe ffb4 	bl	8000c88 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d24:	f7fe ffb0 	bl	8000c88 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e09f      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 8095 	bne.w	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d50:	f7fe ff9a 	bl	8000c88 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d56:	e00f      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d58:	f7fe ff96 	bl	8000c88 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d908      	bls.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e085      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	42470068 	.word	0x42470068
 8001d74:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d78:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d84:	d0e8      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d02b      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d127      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001dae:	4b34      	ldr	r3, [pc, #208]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	4928      	ldr	r1, [pc, #160]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001de4:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	3b01      	subs	r3, #1
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	4922      	ldr	r1, [pc, #136]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01d      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001e12:	d118      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1a:	0e1b      	lsrs	r3, r3, #24
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	019b      	lsls	r3, r3, #6
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	3b01      	subs	r3, #1
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	4910      	ldr	r1, [pc, #64]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7fe ff1c 	bl	8000c88 <HAL_GetTick>
 8001e50:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e54:	f7fe ff18 	bl	8000c88 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e007      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e72:	d1ef      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3730      	adds	r7, #48	@ 0x30
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470070 	.word	0x42470070

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e8c:	b0ae      	sub	sp, #184	@ 0xb8
 8001e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eae:	4bcb      	ldr	r3, [pc, #812]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	f200 8206 	bhi.w	80022c8 <HAL_RCC_GetSysClockFreq+0x440>
 8001ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ef9 	.word	0x08001ef9
 8001ec8:	080022c9 	.word	0x080022c9
 8001ecc:	080022c9 	.word	0x080022c9
 8001ed0:	080022c9 	.word	0x080022c9
 8001ed4:	08001f01 	.word	0x08001f01
 8001ed8:	080022c9 	.word	0x080022c9
 8001edc:	080022c9 	.word	0x080022c9
 8001ee0:	080022c9 	.word	0x080022c9
 8001ee4:	08001f09 	.word	0x08001f09
 8001ee8:	080022c9 	.word	0x080022c9
 8001eec:	080022c9 	.word	0x080022c9
 8001ef0:	080022c9 	.word	0x080022c9
 8001ef4:	080020f9 	.word	0x080020f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4bb9      	ldr	r3, [pc, #740]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001efe:	e1e7      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f00:	4bb8      	ldr	r3, [pc, #736]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f06:	e1e3      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f08:	4bb4      	ldr	r3, [pc, #720]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f14:	4bb1      	ldr	r3, [pc, #708]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d071      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f20:	4bae      	ldr	r3, [pc, #696]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f46:	4622      	mov	r2, r4
 8001f48:	462b      	mov	r3, r5
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	0159      	lsls	r1, r3, #5
 8001f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f58:	0150      	lsls	r0, r2, #5
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4621      	mov	r1, r4
 8001f60:	1a51      	subs	r1, r2, r1
 8001f62:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f64:	4629      	mov	r1, r5
 8001f66:	eb63 0301 	sbc.w	r3, r3, r1
 8001f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f78:	4649      	mov	r1, r9
 8001f7a:	018b      	lsls	r3, r1, #6
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f82:	4641      	mov	r1, r8
 8001f84:	018a      	lsls	r2, r1, #6
 8001f86:	4641      	mov	r1, r8
 8001f88:	1a51      	subs	r1, r2, r1
 8001f8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	00cb      	lsls	r3, r1, #3
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001faa:	4641      	mov	r1, r8
 8001fac:	00ca      	lsls	r2, r1, #3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4622      	mov	r2, r4
 8001fb6:	189b      	adds	r3, r3, r2
 8001fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fba:	462b      	mov	r3, r5
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	eb42 0303 	adc.w	r3, r2, r3
 8001fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	024b      	lsls	r3, r1, #9
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fda:	4621      	mov	r1, r4
 8001fdc:	024a      	lsls	r2, r1, #9
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ff0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ff4:	f7fe f90e 	bl	8000214 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002002:	e067      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002004:	4b75      	ldr	r3, [pc, #468]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	2200      	movs	r2, #0
 800200c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002010:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002014:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800201e:	2300      	movs	r3, #0
 8002020:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002022:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002026:	4622      	mov	r2, r4
 8002028:	462b      	mov	r3, r5
 800202a:	f04f 0000 	mov.w	r0, #0
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	0159      	lsls	r1, r3, #5
 8002034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002038:	0150      	lsls	r0, r2, #5
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4621      	mov	r1, r4
 8002040:	1a51      	subs	r1, r2, r1
 8002042:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002044:	4629      	mov	r1, r5
 8002046:	eb63 0301 	sbc.w	r3, r3, r1
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002058:	4649      	mov	r1, r9
 800205a:	018b      	lsls	r3, r1, #6
 800205c:	4641      	mov	r1, r8
 800205e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002062:	4641      	mov	r1, r8
 8002064:	018a      	lsls	r2, r1, #6
 8002066:	4641      	mov	r1, r8
 8002068:	ebb2 0a01 	subs.w	sl, r2, r1
 800206c:	4649      	mov	r1, r9
 800206e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800207e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002086:	4692      	mov	sl, r2
 8002088:	469b      	mov	fp, r3
 800208a:	4623      	mov	r3, r4
 800208c:	eb1a 0303 	adds.w	r3, sl, r3
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	462b      	mov	r3, r5
 8002094:	eb4b 0303 	adc.w	r3, fp, r3
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020a6:	4629      	mov	r1, r5
 80020a8:	028b      	lsls	r3, r1, #10
 80020aa:	4621      	mov	r1, r4
 80020ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020b0:	4621      	mov	r1, r4
 80020b2:	028a      	lsls	r2, r1, #10
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020bc:	2200      	movs	r2, #0
 80020be:	673b      	str	r3, [r7, #112]	@ 0x70
 80020c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80020c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020c6:	f7fe f8a5 	bl	8000214 <__aeabi_uldivmod>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4613      	mov	r3, r2
 80020d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020d4:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80020e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020f6:	e0eb      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f8:	4b38      	ldr	r3, [pc, #224]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002104:	4b35      	ldr	r3, [pc, #212]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d06b      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002110:	4b32      	ldr	r3, [pc, #200]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	2200      	movs	r2, #0
 8002118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800211a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800211c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800211e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002122:	663b      	str	r3, [r7, #96]	@ 0x60
 8002124:	2300      	movs	r3, #0
 8002126:	667b      	str	r3, [r7, #100]	@ 0x64
 8002128:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800212c:	4622      	mov	r2, r4
 800212e:	462b      	mov	r3, r5
 8002130:	f04f 0000 	mov.w	r0, #0
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	0159      	lsls	r1, r3, #5
 800213a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213e:	0150      	lsls	r0, r2, #5
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4621      	mov	r1, r4
 8002146:	1a51      	subs	r1, r2, r1
 8002148:	61b9      	str	r1, [r7, #24]
 800214a:	4629      	mov	r1, r5
 800214c:	eb63 0301 	sbc.w	r3, r3, r1
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800215e:	4659      	mov	r1, fp
 8002160:	018b      	lsls	r3, r1, #6
 8002162:	4651      	mov	r1, sl
 8002164:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002168:	4651      	mov	r1, sl
 800216a:	018a      	lsls	r2, r1, #6
 800216c:	4651      	mov	r1, sl
 800216e:	ebb2 0801 	subs.w	r8, r2, r1
 8002172:	4659      	mov	r1, fp
 8002174:	eb63 0901 	sbc.w	r9, r3, r1
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002184:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002188:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800218c:	4690      	mov	r8, r2
 800218e:	4699      	mov	r9, r3
 8002190:	4623      	mov	r3, r4
 8002192:	eb18 0303 	adds.w	r3, r8, r3
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	462b      	mov	r3, r5
 800219a:	eb49 0303 	adc.w	r3, r9, r3
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021ac:	4629      	mov	r1, r5
 80021ae:	024b      	lsls	r3, r1, #9
 80021b0:	4621      	mov	r1, r4
 80021b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021b6:	4621      	mov	r1, r4
 80021b8:	024a      	lsls	r2, r1, #9
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021c2:	2200      	movs	r2, #0
 80021c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021cc:	f7fe f822 	bl	8000214 <__aeabi_uldivmod>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4613      	mov	r3, r2
 80021d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021da:	e065      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x420>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	00f42400 	.word	0x00f42400
 80021e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e8:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	2200      	movs	r2, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	4611      	mov	r1, r2
 80021f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80021fa:	2300      	movs	r3, #0
 80021fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80021fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002202:	4642      	mov	r2, r8
 8002204:	464b      	mov	r3, r9
 8002206:	f04f 0000 	mov.w	r0, #0
 800220a:	f04f 0100 	mov.w	r1, #0
 800220e:	0159      	lsls	r1, r3, #5
 8002210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002214:	0150      	lsls	r0, r2, #5
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4641      	mov	r1, r8
 800221c:	1a51      	subs	r1, r2, r1
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	4649      	mov	r1, r9
 8002222:	eb63 0301 	sbc.w	r3, r3, r1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002234:	4659      	mov	r1, fp
 8002236:	018b      	lsls	r3, r1, #6
 8002238:	4651      	mov	r1, sl
 800223a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223e:	4651      	mov	r1, sl
 8002240:	018a      	lsls	r2, r1, #6
 8002242:	4651      	mov	r1, sl
 8002244:	1a54      	subs	r4, r2, r1
 8002246:	4659      	mov	r1, fp
 8002248:	eb63 0501 	sbc.w	r5, r3, r1
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	00eb      	lsls	r3, r5, #3
 8002256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800225a:	00e2      	lsls	r2, r4, #3
 800225c:	4614      	mov	r4, r2
 800225e:	461d      	mov	r5, r3
 8002260:	4643      	mov	r3, r8
 8002262:	18e3      	adds	r3, r4, r3
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	464b      	mov	r3, r9
 8002268:	eb45 0303 	adc.w	r3, r5, r3
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800227a:	4629      	mov	r1, r5
 800227c:	028b      	lsls	r3, r1, #10
 800227e:	4621      	mov	r1, r4
 8002280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002284:	4621      	mov	r1, r4
 8002286:	028a      	lsls	r2, r1, #10
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002290:	2200      	movs	r2, #0
 8002292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002294:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002296:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800229a:	f7fd ffbb 	bl	8000214 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4613      	mov	r3, r2
 80022a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0f1b      	lsrs	r3, r3, #28
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80022b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022c6:	e003      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80022ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	37b8      	adds	r7, #184	@ 0xb8
 80022d8:	46bd      	mov	sp, r7
 80022da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	00f42400 	.word	0x00f42400

080022e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e28d      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8083 	beq.w	800240e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002308:	4b94      	ldr	r3, [pc, #592]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b04      	cmp	r3, #4
 8002312:	d019      	beq.n	8002348 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002314:	4b91      	ldr	r3, [pc, #580]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
        || \
 800231c:	2b08      	cmp	r3, #8
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002320:	4b8e      	ldr	r3, [pc, #568]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232c:	d00c      	beq.n	8002348 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232e:	4b8b      	ldr	r3, [pc, #556]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d112      	bne.n	8002360 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4b88      	ldr	r3, [pc, #544]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002342:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002346:	d10b      	bne.n	8002360 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	4b84      	ldr	r3, [pc, #528]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d05b      	beq.n	800240c <HAL_RCC_OscConfig+0x124>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d157      	bne.n	800240c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e25a      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002368:	d106      	bne.n	8002378 <HAL_RCC_OscConfig+0x90>
 800236a:	4b7c      	ldr	r3, [pc, #496]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7b      	ldr	r2, [pc, #492]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e01d      	b.n	80023b4 <HAL_RCC_OscConfig+0xcc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0xb4>
 8002382:	4b76      	ldr	r3, [pc, #472]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a75      	ldr	r2, [pc, #468]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b73      	ldr	r3, [pc, #460]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a72      	ldr	r2, [pc, #456]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0xcc>
 800239c:	4b6f      	ldr	r3, [pc, #444]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6e      	ldr	r2, [pc, #440]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6b      	ldr	r2, [pc, #428]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fc64 	bl	8000c88 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe fc60 	bl	8000c88 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e21f      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b61      	ldr	r3, [pc, #388]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0xdc>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe fc50 	bl	8000c88 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fc4c 	bl	8000c88 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e20b      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	4b57      	ldr	r3, [pc, #348]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x104>
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d06f      	beq.n	80024fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800241a:	4b50      	ldr	r3, [pc, #320]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b00      	cmp	r3, #0
 8002424:	d017      	beq.n	8002456 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002426:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
        || \
 800242e:	2b08      	cmp	r3, #8
 8002430:	d105      	bne.n	800243e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002432:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d11c      	bne.n	8002484 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b44      	ldr	r3, [pc, #272]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	4b41      	ldr	r3, [pc, #260]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x186>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1d3      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b3b      	ldr	r3, [pc, #236]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4937      	ldr	r1, [pc, #220]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	e03a      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <HAL_RCC_OscConfig+0x278>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fbf9 	bl	8000c88 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7fe fbf5 	bl	8000c88 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1b4      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4925      	ldr	r1, [pc, #148]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_RCC_OscConfig+0x278>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fbd8 	bl	8000c88 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024dc:	f7fe fbd4 	bl	8000c88 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e193      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d036      	beq.n	8002574 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_RCC_OscConfig+0x27c>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fbb8 	bl	8000c88 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251c:	f7fe fbb4 	bl	8000c88 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e173      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 8002530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x234>
 800253a:	e01b      	b.n	8002574 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253c:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_RCC_OscConfig+0x27c>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7fe fba1 	bl	8000c88 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	e00e      	b.n	8002568 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254a:	f7fe fb9d 	bl	8000c88 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d907      	bls.n	8002568 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e15c      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
 800255c:	40023800 	.word	0x40023800
 8002560:	42470000 	.word	0x42470000
 8002564:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	4b8a      	ldr	r3, [pc, #552]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ea      	bne.n	800254a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8097 	beq.w	80026b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002586:	4b83      	ldr	r3, [pc, #524]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	4b7f      	ldr	r3, [pc, #508]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	4a7e      	ldr	r2, [pc, #504]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b79      	ldr	r3, [pc, #484]	@ (8002798 <HAL_RCC_OscConfig+0x4b0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b76      	ldr	r3, [pc, #472]	@ (8002798 <HAL_RCC_OscConfig+0x4b0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a75      	ldr	r2, [pc, #468]	@ (8002798 <HAL_RCC_OscConfig+0x4b0>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fb5d 	bl	8000c88 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7fe fb59 	bl	8000c88 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e118      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002798 <HAL_RCC_OscConfig+0x4b0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x31e>
 80025f8:	4b66      	ldr	r3, [pc, #408]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a65      	ldr	r2, [pc, #404]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x358>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x340>
 800260e:	4b61      	ldr	r3, [pc, #388]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	4a60      	ldr	r2, [pc, #384]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6713      	str	r3, [r2, #112]	@ 0x70
 800261a:	4b5e      	ldr	r3, [pc, #376]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	@ 0x70
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0x358>
 8002628:	4b5a      	ldr	r3, [pc, #360]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	4a59      	ldr	r2, [pc, #356]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	@ 0x70
 8002634:	4b57      	ldr	r3, [pc, #348]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	4a56      	ldr	r2, [pc, #344]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	f023 0304 	bic.w	r3, r3, #4
 800263e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fb1e 	bl	8000c88 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe fb1a 	bl	8000c88 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0d7      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ee      	beq.n	8002650 <HAL_RCC_OscConfig+0x368>
 8002672:	e014      	b.n	800269e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fb08 	bl	8000c88 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe fb04 	bl	8000c88 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0c1      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002692:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ee      	bne.n	800267c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80ad 	beq.w	8002814 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ba:	4b36      	ldr	r3, [pc, #216]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d060      	beq.n	8002788 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d145      	bne.n	800275a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b33      	ldr	r3, [pc, #204]	@ (800279c <HAL_RCC_OscConfig+0x4b4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fad8 	bl	8000c88 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fad4 	bl	8000c88 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e093      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	071b      	lsls	r3, r3, #28
 8002726:	491b      	ldr	r1, [pc, #108]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x4b4>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe faa9 	bl	8000c88 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe faa5 	bl	8000c88 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e064      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x452>
 8002758:	e05c      	b.n	8002814 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <HAL_RCC_OscConfig+0x4b4>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fa92 	bl	8000c88 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fa8e 	bl	8000c88 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04d      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x480>
 8002786:	e045      	b.n	8002814 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e040      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000
 800279c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <HAL_RCC_OscConfig+0x538>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d030      	beq.n	8002810 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d129      	bne.n	8002810 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d122      	bne.n	8002810 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d8:	4293      	cmp	r3, r2
 80027da:	d119      	bne.n	8002810 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10f      	bne.n	8002810 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800

08002824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e042      	b.n	80028bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe f880 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	@ 0x24
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fd51 	bl	8003310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800287c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800288c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800289c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d121      	bne.n	8002922 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_UART_Transmit_IT+0x26>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e01a      	b.n	8002924 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2221      	movs	r2, #33	@ 0x21
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800291c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	@ 0x30
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b20      	cmp	r3, #32
 8002948:	d14a      	bne.n	80029e0 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e043      	b.n	80029e2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	461a      	mov	r2, r3
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fafb 	bl	8002f68 <UART_Start_Receive_IT>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800297c:	2b00      	cmp	r3, #0
 800297e:	d12c      	bne.n	80029da <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	2b01      	cmp	r3, #1
 8002986:	d125      	bne.n	80029d4 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	330c      	adds	r3, #12
 80029a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	e853 3f00 	ldrex	r3, [r3]
 80029ac:	617b      	str	r3, [r7, #20]
   return(result);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f043 0310 	orr.w	r3, r3, #16
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029be:	627a      	str	r2, [r7, #36]	@ 0x24
 80029c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c2:	6a39      	ldr	r1, [r7, #32]
 80029c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e5      	bne.n	800299e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80029d2:	e002      	b.n	80029da <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80029da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029de:	e000      	b.n	80029e2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3730      	adds	r7, #48	@ 0x30
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0ba      	sub	sp, #232	@ 0xe8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_UART_IRQHandler+0x66>
 8002a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fba2 	bl	8003194 <UART_Receive_IT>
      return;
 8002a50:	e273      	b.n	8002f3a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80de 	beq.w	8002c18 <HAL_UART_IRQHandler+0x22c>
 8002a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d106      	bne.n	8002a76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80d1 	beq.w	8002c18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0xae>
 8002a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0xd2>
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xf6>
 8002aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <HAL_UART_IRQHandler+0x126>
 8002aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f043 0208 	orr.w	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 820a 	beq.w	8002f30 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_UART_IRQHandler+0x14e>
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb2d 	bl	8003194 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b44:	2b40      	cmp	r3, #64	@ 0x40
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <HAL_UART_IRQHandler+0x17a>
 8002b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04f      	beq.n	8002c06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa38 	bl	8002fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	2b40      	cmp	r3, #64	@ 0x40
 8002b78:	d141      	bne.n	8002bfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1d9      	bne.n	8002b7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d013      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd2:	4a8a      	ldr	r2, [pc, #552]	@ (8002dfc <HAL_UART_IRQHandler+0x410>)
 8002bd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fa05 	bl	8000fea <HAL_DMA_Abort_IT>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	e00e      	b.n	8002c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9ac 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	e00a      	b.n	8002c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9a8 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	e006      	b.n	8002c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f9a4 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c12:	e18d      	b.n	8002f30 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	bf00      	nop
    return;
 8002c16:	e18b      	b.n	8002f30 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 8167 	bne.w	8002ef0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8160 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8159 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5e:	2b40      	cmp	r3, #64	@ 0x40
 8002c60:	f040 80ce 	bne.w	8002e00 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a9 	beq.w	8002dcc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c82:	429a      	cmp	r2, r3
 8002c84:	f080 80a2 	bcs.w	8002dcc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c9a:	f000 8088 	beq.w	8002dae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002cca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1d9      	bne.n	8002c9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3314      	adds	r3, #20
 8002d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e1      	bne.n	8002cea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3314      	adds	r3, #20
 8002d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e3      	bne.n	8002d26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d7e:	f023 0310 	bic.w	r3, r3, #16
 8002d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	330c      	adds	r3, #12
 8002d8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e3      	bne.n	8002d6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f8ae 	bl	8000f0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fd fbd5 	bl	8000574 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002dca:	e0b3      	b.n	8002f34 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 80ad 	bne.w	8002f34 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de4:	f040 80a6 	bne.w	8002f34 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fd fbbd 	bl	8000574 <HAL_UARTEx_RxEventCallback>
      return;
 8002dfa:	e09b      	b.n	8002f34 <HAL_UART_IRQHandler+0x548>
 8002dfc:	080030a3 	.word	0x080030a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 808e 	beq.w	8002f38 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8089 	beq.w	8002f38 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	330c      	adds	r3, #12
 8002e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e3      	bne.n	8002e26 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3314      	adds	r3, #20
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3314      	adds	r3, #20
 8002e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e82:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e3      	bne.n	8002e5e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0310 	bic.w	r3, r3, #16
 8002eba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ec8:	61fa      	str	r2, [r7, #28]
 8002eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e3      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fd fb43 	bl	8000574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eee:	e023      	b.n	8002f38 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <HAL_UART_IRQHandler+0x524>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8db 	bl	80030c4 <UART_Transmit_IT>
    return;
 8002f0e:	e014      	b.n	8002f3a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <HAL_UART_IRQHandler+0x54e>
 8002f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f91b 	bl	8003164 <UART_EndTransmit_IT>
    return;
 8002f2e:	e004      	b.n	8002f3a <HAL_UART_IRQHandler+0x54e>
    return;
 8002f30:	bf00      	nop
 8002f32:	e002      	b.n	8002f3a <HAL_UART_IRQHandler+0x54e>
      return;
 8002f34:	bf00      	nop
 8002f36:	e000      	b.n	8002f3a <HAL_UART_IRQHandler+0x54e>
      return;
 8002f38:	bf00      	nop
  }
}
 8002f3a:	37e8      	adds	r7, #232	@ 0xe8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2222      	movs	r2, #34	@ 0x22
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
 8002fcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b095      	sub	sp, #84	@ 0x54
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003004:	643a      	str	r2, [r7, #64]	@ 0x40
 8003006:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800300a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e5      	bne.n	8002fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3314      	adds	r3, #20
 800301e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	61fb      	str	r3, [r7, #28]
   return(result);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3314      	adds	r3, #20
 8003036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003038:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800303e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e5      	bne.n	8003018 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	2b01      	cmp	r3, #1
 8003052:	d119      	bne.n	8003088 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	60bb      	str	r3, [r7, #8]
   return(result);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f023 0310 	bic.w	r3, r3, #16
 800306a:	647b      	str	r3, [r7, #68]	@ 0x44
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003074:	61ba      	str	r2, [r7, #24]
 8003076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6979      	ldr	r1, [r7, #20]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	613b      	str	r3, [r7, #16]
   return(result);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003096:	bf00      	nop
 8003098:	3754      	adds	r7, #84	@ 0x54
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff ff4c 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b21      	cmp	r3, #33	@ 0x21
 80030d6:	d13e      	bne.n	8003156 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e0:	d114      	bne.n	800310c <UART_Transmit_IT+0x48>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d110      	bne.n	800310c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	1c9a      	adds	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	621a      	str	r2, [r3, #32]
 800310a:	e008      	b.n	800311e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	1c59      	adds	r1, r3, #1
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6211      	str	r1, [r2, #32]
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29b      	uxth	r3, r3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4619      	mov	r1, r3
 800312c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003140:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003150:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800317a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd f9db 	bl	8000540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	@ 0x30
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b22      	cmp	r3, #34	@ 0x22
 80031ae:	f040 80aa 	bne.w	8003306 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ba:	d115      	bne.n	80031e8 <UART_Receive_IT+0x54>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d111      	bne.n	80031e8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e0:	1c9a      	adds	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80031e6:	e024      	b.n	8003232 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f6:	d007      	beq.n	8003208 <UART_Receive_IT+0x74>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <UART_Receive_IT+0x82>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b2da      	uxtb	r2, r3
 8003210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e008      	b.n	8003228 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003222:	b2da      	uxtb	r2, r3
 8003224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003226:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4619      	mov	r1, r3
 8003240:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003242:	2b00      	cmp	r3, #0
 8003244:	d15d      	bne.n	8003302 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0220 	bic.w	r2, r2, #32
 8003254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003264:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	2b01      	cmp	r3, #1
 800328a:	d135      	bne.n	80032f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	330c      	adds	r3, #12
 8003298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	613b      	str	r3, [r7, #16]
   return(result);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f023 0310 	bic.w	r3, r3, #16
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b2:	623a      	str	r2, [r7, #32]
 80032b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	69f9      	ldr	r1, [r7, #28]
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	61bb      	str	r3, [r7, #24]
   return(result);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e5      	bne.n	8003292 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d10a      	bne.n	80032ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd f93f 	bl	8000574 <HAL_UARTEx_RxEventCallback>
 80032f6:	e002      	b.n	80032fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fe21 	bl	8002f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e002      	b.n	8003308 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e000      	b.n	8003308 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3730      	adds	r7, #48	@ 0x30
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003314:	b0c0      	sub	sp, #256	@ 0x100
 8003316:	af00      	add	r7, sp, #0
 8003318:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	68d9      	ldr	r1, [r3, #12]
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	ea40 0301 	orr.w	r3, r0, r1
 8003338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	431a      	orrs	r2, r3
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	431a      	orrs	r2, r3
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003368:	f021 010c 	bic.w	r1, r1, #12
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003376:	430b      	orrs	r3, r1
 8003378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338a:	6999      	ldr	r1, [r3, #24]
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	ea40 0301 	orr.w	r3, r0, r1
 8003396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b8f      	ldr	r3, [pc, #572]	@ (80035dc <UART_SetConfig+0x2cc>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d005      	beq.n	80033b0 <UART_SetConfig+0xa0>
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b8d      	ldr	r3, [pc, #564]	@ (80035e0 <UART_SetConfig+0x2d0>)
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d104      	bne.n	80033ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033b0:	f7fe fa2c 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80033b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033b8:	e003      	b.n	80033c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ba:	f7fe fa13 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 80033be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033cc:	f040 810c 	bne.w	80035e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033e2:	4622      	mov	r2, r4
 80033e4:	462b      	mov	r3, r5
 80033e6:	1891      	adds	r1, r2, r2
 80033e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033ea:	415b      	adcs	r3, r3
 80033ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033f2:	4621      	mov	r1, r4
 80033f4:	eb12 0801 	adds.w	r8, r2, r1
 80033f8:	4629      	mov	r1, r5
 80033fa:	eb43 0901 	adc.w	r9, r3, r1
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800340a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800340e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003412:	4690      	mov	r8, r2
 8003414:	4699      	mov	r9, r3
 8003416:	4623      	mov	r3, r4
 8003418:	eb18 0303 	adds.w	r3, r8, r3
 800341c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003420:	462b      	mov	r3, r5
 8003422:	eb49 0303 	adc.w	r3, r9, r3
 8003426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003436:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800343a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800343e:	460b      	mov	r3, r1
 8003440:	18db      	adds	r3, r3, r3
 8003442:	653b      	str	r3, [r7, #80]	@ 0x50
 8003444:	4613      	mov	r3, r2
 8003446:	eb42 0303 	adc.w	r3, r2, r3
 800344a:	657b      	str	r3, [r7, #84]	@ 0x54
 800344c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003454:	f7fc fede 	bl	8000214 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4b61      	ldr	r3, [pc, #388]	@ (80035e4 <UART_SetConfig+0x2d4>)
 800345e:	fba3 2302 	umull	r2, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	011c      	lsls	r4, r3, #4
 8003466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003470:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	1891      	adds	r1, r2, r2
 800347e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003480:	415b      	adcs	r3, r3
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003488:	4641      	mov	r1, r8
 800348a:	eb12 0a01 	adds.w	sl, r2, r1
 800348e:	4649      	mov	r1, r9
 8003490:	eb43 0b01 	adc.w	fp, r3, r1
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034a8:	4692      	mov	sl, r2
 80034aa:	469b      	mov	fp, r3
 80034ac:	4643      	mov	r3, r8
 80034ae:	eb1a 0303 	adds.w	r3, sl, r3
 80034b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034b6:	464b      	mov	r3, r9
 80034b8:	eb4b 0303 	adc.w	r3, fp, r3
 80034bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034d4:	460b      	mov	r3, r1
 80034d6:	18db      	adds	r3, r3, r3
 80034d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80034da:	4613      	mov	r3, r2
 80034dc:	eb42 0303 	adc.w	r3, r2, r3
 80034e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034ea:	f7fc fe93 	bl	8000214 <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	4b3b      	ldr	r3, [pc, #236]	@ (80035e4 <UART_SetConfig+0x2d4>)
 80034f6:	fba3 2301 	umull	r2, r3, r3, r1
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2264      	movs	r2, #100	@ 0x64
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	1acb      	subs	r3, r1, r3
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800350a:	4b36      	ldr	r3, [pc, #216]	@ (80035e4 <UART_SetConfig+0x2d4>)
 800350c:	fba3 2302 	umull	r2, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003518:	441c      	add	r4, r3
 800351a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003524:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	1891      	adds	r1, r2, r2
 8003532:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003534:	415b      	adcs	r3, r3
 8003536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800353c:	4641      	mov	r1, r8
 800353e:	1851      	adds	r1, r2, r1
 8003540:	6339      	str	r1, [r7, #48]	@ 0x30
 8003542:	4649      	mov	r1, r9
 8003544:	414b      	adcs	r3, r1
 8003546:	637b      	str	r3, [r7, #52]	@ 0x34
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003554:	4659      	mov	r1, fp
 8003556:	00cb      	lsls	r3, r1, #3
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355e:	4651      	mov	r1, sl
 8003560:	00ca      	lsls	r2, r1, #3
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	4603      	mov	r3, r0
 8003568:	4642      	mov	r2, r8
 800356a:	189b      	adds	r3, r3, r2
 800356c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003570:	464b      	mov	r3, r9
 8003572:	460a      	mov	r2, r1
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003588:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800358c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003590:	460b      	mov	r3, r1
 8003592:	18db      	adds	r3, r3, r3
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003596:	4613      	mov	r3, r2
 8003598:	eb42 0303 	adc.w	r3, r2, r3
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800359e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035a6:	f7fc fe35 	bl	8000214 <__aeabi_uldivmod>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <UART_SetConfig+0x2d4>)
 80035b0:	fba3 1302 	umull	r1, r3, r3, r2
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	2164      	movs	r1, #100	@ 0x64
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	3332      	adds	r3, #50	@ 0x32
 80035c2:	4a08      	ldr	r2, [pc, #32]	@ (80035e4 <UART_SetConfig+0x2d4>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	f003 0207 	and.w	r2, r3, #7
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4422      	add	r2, r4
 80035d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035d8:	e106      	b.n	80037e8 <UART_SetConfig+0x4d8>
 80035da:	bf00      	nop
 80035dc:	40011000 	.word	0x40011000
 80035e0:	40011400 	.word	0x40011400
 80035e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035fa:	4642      	mov	r2, r8
 80035fc:	464b      	mov	r3, r9
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	6239      	str	r1, [r7, #32]
 8003602:	415b      	adcs	r3, r3
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
 8003606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800360a:	4641      	mov	r1, r8
 800360c:	1854      	adds	r4, r2, r1
 800360e:	4649      	mov	r1, r9
 8003610:	eb43 0501 	adc.w	r5, r3, r1
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	00eb      	lsls	r3, r5, #3
 800361e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003622:	00e2      	lsls	r2, r4, #3
 8003624:	4614      	mov	r4, r2
 8003626:	461d      	mov	r5, r3
 8003628:	4643      	mov	r3, r8
 800362a:	18e3      	adds	r3, r4, r3
 800362c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003630:	464b      	mov	r3, r9
 8003632:	eb45 0303 	adc.w	r3, r5, r3
 8003636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003646:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003656:	4629      	mov	r1, r5
 8003658:	008b      	lsls	r3, r1, #2
 800365a:	4621      	mov	r1, r4
 800365c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003660:	4621      	mov	r1, r4
 8003662:	008a      	lsls	r2, r1, #2
 8003664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003668:	f7fc fdd4 	bl	8000214 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4b60      	ldr	r3, [pc, #384]	@ (80037f4 <UART_SetConfig+0x4e4>)
 8003672:	fba3 2302 	umull	r2, r3, r3, r2
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	011c      	lsls	r4, r3, #4
 800367a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800368c:	4642      	mov	r2, r8
 800368e:	464b      	mov	r3, r9
 8003690:	1891      	adds	r1, r2, r2
 8003692:	61b9      	str	r1, [r7, #24]
 8003694:	415b      	adcs	r3, r3
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800369c:	4641      	mov	r1, r8
 800369e:	1851      	adds	r1, r2, r1
 80036a0:	6139      	str	r1, [r7, #16]
 80036a2:	4649      	mov	r1, r9
 80036a4:	414b      	adcs	r3, r1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036b4:	4659      	mov	r1, fp
 80036b6:	00cb      	lsls	r3, r1, #3
 80036b8:	4651      	mov	r1, sl
 80036ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036be:	4651      	mov	r1, sl
 80036c0:	00ca      	lsls	r2, r1, #3
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	4642      	mov	r2, r8
 80036ca:	189b      	adds	r3, r3, r2
 80036cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036d0:	464b      	mov	r3, r9
 80036d2:	460a      	mov	r2, r1
 80036d4:	eb42 0303 	adc.w	r3, r2, r3
 80036d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036f4:	4649      	mov	r1, r9
 80036f6:	008b      	lsls	r3, r1, #2
 80036f8:	4641      	mov	r1, r8
 80036fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036fe:	4641      	mov	r1, r8
 8003700:	008a      	lsls	r2, r1, #2
 8003702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003706:	f7fc fd85 	bl	8000214 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4611      	mov	r1, r2
 8003710:	4b38      	ldr	r3, [pc, #224]	@ (80037f4 <UART_SetConfig+0x4e4>)
 8003712:	fba3 2301 	umull	r2, r3, r3, r1
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2264      	movs	r2, #100	@ 0x64
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	1acb      	subs	r3, r1, r3
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	3332      	adds	r3, #50	@ 0x32
 8003724:	4a33      	ldr	r2, [pc, #204]	@ (80037f4 <UART_SetConfig+0x4e4>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003730:	441c      	add	r4, r3
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	673b      	str	r3, [r7, #112]	@ 0x70
 800373a:	677a      	str	r2, [r7, #116]	@ 0x74
 800373c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	1891      	adds	r1, r2, r2
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	415b      	adcs	r3, r3
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003750:	4641      	mov	r1, r8
 8003752:	1851      	adds	r1, r2, r1
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	4649      	mov	r1, r9
 8003758:	414b      	adcs	r3, r1
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003768:	4659      	mov	r1, fp
 800376a:	00cb      	lsls	r3, r1, #3
 800376c:	4651      	mov	r1, sl
 800376e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003772:	4651      	mov	r1, sl
 8003774:	00ca      	lsls	r2, r1, #3
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	4603      	mov	r3, r0
 800377c:	4642      	mov	r2, r8
 800377e:	189b      	adds	r3, r3, r2
 8003780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003782:	464b      	mov	r3, r9
 8003784:	460a      	mov	r2, r1
 8003786:	eb42 0303 	adc.w	r3, r2, r3
 800378a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	663b      	str	r3, [r7, #96]	@ 0x60
 8003796:	667a      	str	r2, [r7, #100]	@ 0x64
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037a4:	4649      	mov	r1, r9
 80037a6:	008b      	lsls	r3, r1, #2
 80037a8:	4641      	mov	r1, r8
 80037aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ae:	4641      	mov	r1, r8
 80037b0:	008a      	lsls	r2, r1, #2
 80037b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037b6:	f7fc fd2d 	bl	8000214 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <UART_SetConfig+0x4e4>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	@ 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	3332      	adds	r3, #50	@ 0x32
 80037d2:	4a08      	ldr	r2, [pc, #32]	@ (80037f4 <UART_SetConfig+0x4e4>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4422      	add	r2, r4
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037ee:	46bd      	mov	sp, r7
 80037f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f4:	51eb851f 	.word	0x51eb851f

080037f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037f8:	b084      	sub	sp, #16
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	f107 001c 	add.w	r0, r7, #28
 8003806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800380a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800380e:	2b01      	cmp	r3, #1
 8003810:	d123      	bne.n	800385a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800383a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa9a 	bl	8003d88 <USB_CoreReset>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e01b      	b.n	8003892 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa8e 	bl	8003d88 <USB_CoreReset>
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003870:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	@ 0x38
 8003884:	e005      	b.n	8003892 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003892:	7fbb      	ldrb	r3, [r7, #30]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10b      	bne.n	80038b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f043 0206 	orr.w	r2, r3, #6
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038bc:	b004      	add	sp, #16
 80038be:	4770      	bx	lr

080038c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 0201 	bic.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d115      	bne.n	8003930 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003910:	200a      	movs	r0, #10
 8003912:	f7fd f9c5 	bl	8000ca0 <HAL_Delay>
      ms += 10U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	330a      	adds	r3, #10
 800391a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa25 	bl	8003d6c <USB_GetMode>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d01e      	beq.n	8003966 <USB_SetCurrentMode+0x84>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2bc7      	cmp	r3, #199	@ 0xc7
 800392c:	d9f0      	bls.n	8003910 <USB_SetCurrentMode+0x2e>
 800392e:	e01a      	b.n	8003966 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d115      	bne.n	8003962 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003942:	200a      	movs	r0, #10
 8003944:	f7fd f9ac 	bl	8000ca0 <HAL_Delay>
      ms += 10U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	330a      	adds	r3, #10
 800394c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa0c 	bl	8003d6c <USB_GetMode>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <USB_SetCurrentMode+0x84>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2bc7      	cmp	r3, #199	@ 0xc7
 800395e:	d9f0      	bls.n	8003942 <USB_SetCurrentMode+0x60>
 8003960:	e001      	b.n	8003966 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e005      	b.n	8003972 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2bc8      	cmp	r3, #200	@ 0xc8
 800396a:	d101      	bne.n	8003970 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800397c:	b084      	sub	sp, #16
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800398a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	e009      	b.n	80039b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3340      	adds	r3, #64	@ 0x40
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	3301      	adds	r3, #1
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b0e      	cmp	r3, #14
 80039b4:	d9f2      	bls.n	800399c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d11c      	bne.n	80039f8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e005      	b.n	8003a04 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10d      	bne.n	8003a34 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a20:	2100      	movs	r1, #0
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f968 	bl	8003cf8 <USB_SetDevSpeed>
 8003a28:	e008      	b.n	8003a3c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f963 	bl	8003cf8 <USB_SetDevSpeed>
 8003a32:	e003      	b.n	8003a3c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a34:	2103      	movs	r1, #3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f95e 	bl	8003cf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a3c:	2110      	movs	r1, #16
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8fa 	bl	8003c38 <USB_FlushTxFifo>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f924 	bl	8003c9c <USB_FlushRxFifo>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a64:	461a      	mov	r2, r3
 8003a66:	2300      	movs	r3, #0
 8003a68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a70:	461a      	mov	r2, r3
 8003a72:	2300      	movs	r3, #0
 8003a74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e043      	b.n	8003b10 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a9e:	d118      	bne.n	8003ad2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e013      	b.n	8003ae4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e008      	b.n	8003ae4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af0:	461a      	mov	r2, r3
 8003af2:	2300      	movs	r3, #0
 8003af4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b02:	461a      	mov	r2, r3
 8003b04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b14:	461a      	mov	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d3b5      	bcc.n	8003a88 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e043      	b.n	8003baa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b38:	d118      	bne.n	8003b6c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e013      	b.n	8003b7e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b62:	461a      	mov	r2, r3
 8003b64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e008      	b.n	8003b7e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ba2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bae:	461a      	mov	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d3b5      	bcc.n	8003b22 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003bd6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f043 0210 	orr.w	r2, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <USB_DevInit+0x2b8>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bf8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f043 0208 	orr.w	r2, r3, #8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c30:	b004      	add	sp, #16
 8003c32:	4770      	bx	lr
 8003c34:	803c3800 	.word	0x803c3800

08003c38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c52:	d901      	bls.n	8003c58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e01b      	b.n	8003c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	daf2      	bge.n	8003c46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c7c:	d901      	bls.n	8003c82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e006      	b.n	8003c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d0f0      	beq.n	8003c70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cb4:	d901      	bls.n	8003cba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e018      	b.n	8003cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	daf2      	bge.n	8003ca8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cd8:	d901      	bls.n	8003cde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d0f0      	beq.n	8003ccc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003d44:	f023 0303 	bic.w	r3, r3, #3
 8003d48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0301 	and.w	r3, r3, #1
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003da0:	d901      	bls.n	8003da6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e022      	b.n	8003dec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	daf2      	bge.n	8003d94 <USB_CoreReset+0xc>

  count = 10U;
 8003dae:	230a      	movs	r3, #10
 8003db0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003db2:	e002      	b.n	8003dba <USB_CoreReset+0x32>
  {
    count--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f9      	bne.n	8003db4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dd8:	d901      	bls.n	8003dde <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e006      	b.n	8003dec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d0f0      	beq.n	8003dcc <USB_CoreReset+0x44>

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <memset>:
 8003df8:	4402      	add	r2, r0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	f803 1b01 	strb.w	r1, [r3], #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e40 <__libc_init_array+0x38>)
 8003e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003e44 <__libc_init_array+0x3c>)
 8003e0e:	1b64      	subs	r4, r4, r5
 8003e10:	10a4      	asrs	r4, r4, #2
 8003e12:	2600      	movs	r6, #0
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	4d0b      	ldr	r5, [pc, #44]	@ (8003e48 <__libc_init_array+0x40>)
 8003e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e4c <__libc_init_array+0x44>)
 8003e1c:	f000 f818 	bl	8003e50 <_init>
 8003e20:	1b64      	subs	r4, r4, r5
 8003e22:	10a4      	asrs	r4, r4, #2
 8003e24:	2600      	movs	r6, #0
 8003e26:	42a6      	cmp	r6, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e30:	4798      	blx	r3
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3a:	4798      	blx	r3
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08003e94 	.word	0x08003e94
 8003e44:	08003e94 	.word	0x08003e94
 8003e48:	08003e94 	.word	0x08003e94
 8003e4c:	08003e98 	.word	0x08003e98

08003e50 <_init>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr

08003e5c <_fini>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr
